
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNATIONleftORleftANDleftEQUALITYleftGREATERLESSERleftPLUSMINUSleftMULTIPLICATIONDIVISIONMODULUSrightNOTNOT AND OR START FINISH WORDS NUMBER MANYNUMBERS LETTER PROCEDURE FLAG IF ENDIF DEFINE ENDDEFINE WHILE ENDWHILE ELSE BLOCKS ENDBLOCKS VARIABLES ENDVARIABLES PROGRAM ENDPROGRAM DISPLAY RETURN GREATER LESSER EQUALITY ASSIGNATION PLUS MINUS MULTIPLICATION DIVISION MODULUS NUMBERVALUE FLAGVALUE LETTERVALUE WORDSVALUE IDENTIFIER NEWLINE COMMA SEMICOLON OPARENTHESIS CPARENTHESIS OBRACKETS CBRACKETSsimple : PROGRAM program ENDPROGRAMempty :program : variables blocks mainvariables : VARIABLES declarationList ENDVARIABLESvariables : emptydeclarationList : declaration declarationListdeclarationList : emptydeclaration : variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLONdeclaration : arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLONdeclaration : variableType IDENTIFIER declarationExtra SEMICOLONdeclaration : arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLONdeclarationExtra : COMMA IDENTIFIER ASSIGNATION expression declarationExtraarrayDeclarationExtra : COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtradeclarationExtra : COMMA IDENTIFIER declarationExtraarrayDeclarationExtra : COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtradeclarationExtra : emptyarrayDeclarationExtra : emptyarrayIndexes : expression arrayIndexesExtraarrayIndexesExtra : COMMA expression arrayIndexesExtraarrayIndexesExtra : emptyblocks : BLOCKS blockList ENDBLOCKSblocks : emptyblockList : block blockListblockList : emptyblock : DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINEblock : emptyblockType : PROCEDURE\n                  | variableType\n                  | arrayTypevariableType : NUMBER \n                    | WORDS\n                    | LETTER\n                    | FLAGarrayType : MANYNUMBERSparameters : OPARENTHESIS parameter CPARENTHESISparameter : variableType IDENTIFIER parameterExtraparameter : arrayType IDENTIFIER parameterExtraparameter : emptyparameterExtra : COMMA variableType IDENTIFIER parameterExtraparameterExtra : COMMA arrayType IDENTIFIER parameterExtraparameterExtra : emptystatementPoint : statementListstatementList : statement statementListstatementList : emptystatement : assign SEMICOLON \n                   | call SEMICOLON \n                   | return  empty \n                   | ifStatement empty \n                   | whileStatement emptystatement : emptyassign : location ASSIGNATION expression location : IDENTIFIERlocation : IDENTIFIER OBRACKETS arrayIndexes CBRACKETScall : IDENTIFIER OPARENTHESIS actuals CPARENTHESISactuals : expression commaExpressionListcommaExpressionList : COMMA expression commaExpressionListcommaExpressionList : emptyreturn : RETURN expression SEMICOLONreturn : RETURN SEMICOLONifStatement : IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIFelseStatement : ELSE statementPointelseStatement : emptywhileStatement : WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILEmain : START variables statementPoint FINISH expression : locationexpression : callexpression : unaryExpressionexpression : binaryExpressionexpression : FLAGVALUE\n                  | NUMBERVALUE\n                  | WORDSVALUE\n                  | LETTERVALUEexpression : OPARENTHESIS expression CPARENTHESISbinaryExpression : expression OR expressionbinaryExpression : expression AND expressionbinaryExpression : expression LESSER expressionbinaryExpression : expression GREATER expressionbinaryExpression : expression EQUALITY expressionbinaryExpression : expression PLUS expressionbinaryExpression : expression MINUS expressionbinaryExpression : expression MULTIPLICATION expressionbinaryExpression : expression DIVISION expressionunaryExpression : NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,],[0,-1,]),'VARIABLES':([2,22,88,145,],[5,5,5,-35,]),'BLOCKS':([2,4,6,27,],[-2,9,-5,-4,]),'START':([2,4,6,8,10,27,32,],[-2,-2,-5,22,-22,-4,-21,]),'ENDPROGRAM':([3,21,74,],[7,-3,-64,]),'ENDVARIABLES':([5,11,12,13,28,70,120,150,170,],[-2,27,-2,-7,-6,-10,-8,-11,-9,]),'NUMBER':([5,12,26,70,89,120,150,158,170,],[16,16,16,-10,16,-8,-11,16,-9,]),'WORDS':([5,12,26,70,89,120,150,158,170,],[17,17,17,-10,17,-8,-11,17,-9,]),'LETTER':([5,12,26,70,89,120,150,158,170,],[18,18,18,-10,18,-8,-11,18,-9,]),'FLAG':([5,12,26,70,89,120,150,158,170,],[19,19,19,-10,19,-8,-11,19,-9,]),'MANYNUMBERS':([5,12,26,70,89,120,150,158,170,],[20,20,20,-10,20,-8,-11,20,-9,]),'IDENTIFIER':([6,14,15,16,17,18,19,20,22,27,31,34,35,36,37,38,40,42,45,46,49,50,51,54,68,69,76,77,78,79,80,81,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,102,106,112,115,117,118,132,134,139,142,143,145,162,165,167,168,169,172,179,],[-5,29,30,-30,-31,-32,-33,-34,-2,-4,53,57,-27,-28,-29,58,71,58,53,-50,-2,-2,-2,58,58,58,-45,-46,-47,-48,-49,58,58,58,-59,58,58,-2,58,58,58,58,58,58,58,58,58,58,58,-58,53,146,147,58,151,58,53,53,-35,58,53,-63,174,175,-60,58,]),'RETURN':([6,22,27,31,45,46,49,50,51,76,77,78,79,80,85,88,112,115,142,143,145,165,167,172,],[-5,-2,-4,54,54,-50,-2,-2,-2,-45,-46,-47,-48,-49,-59,-2,-58,54,54,54,-35,54,-63,-60,]),'IF':([6,22,27,31,45,46,49,50,51,76,77,78,79,80,85,88,112,115,142,143,145,165,167,172,],[-5,-2,-4,55,55,-50,-2,-2,-2,-45,-46,-47,-48,-49,-59,-2,-58,55,55,55,-35,55,-63,-60,]),'WHILE':([6,22,27,31,45,46,49,50,51,76,77,78,79,80,85,88,112,115,142,143,145,165,167,172,],[-5,-2,-4,56,56,-50,-2,-2,-2,-45,-46,-47,-48,-49,-59,-2,-58,56,56,56,-35,56,-63,-60,]),'FINISH':([6,22,27,31,43,44,45,46,49,50,51,75,76,77,78,79,80,85,112,167,172,],[-5,-2,-4,-2,74,-42,-2,-44,-2,-2,-2,-43,-45,-46,-47,-48,-49,-59,-58,-63,-60,]),'ENDDEFINE':([6,27,44,45,46,49,50,51,75,76,77,78,79,80,85,88,112,115,144,145,167,172,],[-5,-4,-42,-2,-44,-2,-2,-2,-43,-45,-46,-47,-48,-49,-59,-2,-58,-2,156,-35,-63,-60,]),'DEFINE':([9,24,25,156,],[26,26,-26,-25,]),'ENDBLOCKS':([9,23,24,25,33,156,],[-2,32,-2,-24,-23,-25,]),'PROCEDURE':([26,],[35,]),'ASSIGNATION':([29,52,53,71,104,141,176,],[38,81,-52,102,132,-53,179,]),'COMMA':([29,58,59,60,61,62,63,64,65,66,67,71,73,101,104,110,121,122,123,124,125,126,127,128,129,130,131,136,137,141,146,147,149,153,174,175,176,181,],[40,-52,40,-65,-66,-67,-68,-69,-70,-71,-72,40,106,-83,134,139,-74,-75,-76,-77,-78,-79,-80,-81,-82,-73,40,106,-54,-53,158,158,134,139,158,158,134,134,]),'SEMICOLON':([29,39,41,47,48,54,58,59,60,61,62,63,64,65,66,67,71,84,90,101,103,104,108,121,122,123,124,125,126,127,128,129,130,131,133,135,137,141,148,149,161,176,180,181,182,],[-2,70,-16,76,77,85,-52,-2,-65,-66,-67,-68,-69,-70,-71,-72,-2,112,120,-83,-14,-2,-51,-74,-75,-76,-77,-78,-79,-80,-81,-82,-73,-2,150,-17,-54,-53,-12,-2,170,-2,-15,-2,-13,]),'OBRACKETS':([30,53,58,151,],[42,83,83,162,]),'FLAGVALUE':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'NUMBERVALUE':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'WORDSVALUE':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'LETTERVALUE':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'OPARENTHESIS':([38,42,53,54,55,56,57,58,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[68,68,82,68,86,87,89,82,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'NOT':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'ELSE':([44,45,46,49,50,51,75,76,77,78,79,80,85,112,142,154,167,172,],[-42,-2,-44,-2,-2,-2,-43,-45,-46,-47,-48,-49,-59,-58,-2,165,-63,-60,]),'ENDIF':([44,45,46,49,50,51,75,76,77,78,79,80,85,112,142,154,164,165,166,167,172,173,],[-42,-2,-44,-2,-2,-2,-43,-45,-46,-47,-48,-49,-59,-58,-2,-2,172,-2,-62,-63,-60,-61,]),'ENDWHILE':([44,45,46,49,50,51,75,76,77,78,79,80,85,112,143,155,167,172,],[-42,-2,-44,-2,-2,-2,-43,-45,-46,-47,-48,-49,-59,-58,-2,167,-63,-60,]),'OR':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,91,-65,-66,-67,-68,-69,-70,-71,-72,91,91,91,-83,91,91,91,91,-74,-75,-76,-77,-78,-79,-80,-81,-82,-73,91,91,-54,-53,91,91,91,]),'AND':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,92,-65,-66,-67,-68,-69,-70,-71,-72,92,92,92,-83,92,92,92,92,92,-75,-76,-77,-78,-79,-80,-81,-82,-73,92,92,-54,-53,92,92,92,]),'LESSER':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,93,-65,-66,-67,-68,-69,-70,-71,-72,93,93,93,-83,93,93,93,93,93,93,-76,-77,93,-79,-80,-81,-82,-73,93,93,-54,-53,93,93,93,]),'GREATER':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,94,-65,-66,-67,-68,-69,-70,-71,-72,94,94,94,-83,94,94,94,94,94,94,-76,-77,94,-79,-80,-81,-82,-73,94,94,-54,-53,94,94,94,]),'EQUALITY':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,95,-65,-66,-67,-68,-69,-70,-71,-72,95,95,95,-83,95,95,95,95,95,95,-76,-77,-78,-79,-80,-81,-82,-73,95,95,-54,-53,95,95,95,]),'PLUS':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,96,-65,-66,-67,-68,-69,-70,-71,-72,96,96,96,-83,96,96,96,96,96,96,96,96,96,-79,-80,-81,-82,-73,96,96,-54,-53,96,96,96,]),'MINUS':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,97,-65,-66,-67,-68,-69,-70,-71,-72,97,97,97,-83,97,97,97,97,97,97,97,97,97,-79,-80,-81,-82,-73,97,97,-54,-53,97,97,97,]),'MULTIPLICATION':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,98,-65,-66,-67,-68,-69,-70,-71,-72,98,98,98,-83,98,98,98,98,98,98,98,98,98,98,98,-81,-82,-73,98,98,-54,-53,98,98,98,]),'DIVISION':([58,59,60,61,62,63,64,65,66,67,73,84,100,101,108,110,113,114,121,122,123,124,125,126,127,128,129,130,131,136,137,141,149,153,181,],[-52,99,-65,-66,-67,-68,-69,-70,-71,-72,99,99,99,-83,99,99,99,99,99,99,99,99,99,99,99,-81,-82,-73,99,99,-54,-53,99,99,99,]),'CBRACKETS':([58,60,61,62,63,64,65,66,67,72,73,101,105,107,111,121,122,123,124,125,126,127,128,129,130,136,137,141,152,171,],[-52,-65,-66,-67,-68,-69,-70,-71,-72,104,-2,-83,-18,-20,141,-74,-75,-76,-77,-78,-79,-80,-81,-82,-73,-2,-54,-53,-19,176,]),'CPARENTHESIS':([58,60,61,62,63,64,65,66,67,89,100,101,109,110,113,114,116,119,121,122,123,124,125,126,127,128,129,130,137,138,140,141,146,147,153,157,159,160,163,174,175,177,178,],[-52,-65,-66,-67,-68,-69,-70,-71,-72,-2,130,-83,137,-2,142,143,145,-38,-74,-75,-76,-77,-78,-79,-80,-81,-82,-73,-54,-55,-57,-53,-2,-2,-2,-36,-41,-37,-56,-2,-2,-39,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'simple':([0,],[1,]),'program':([2,],[3,]),'variables':([2,22,88,],[4,31,115,]),'empty':([2,4,5,9,12,22,24,29,31,45,49,50,51,59,71,73,88,89,104,110,115,131,136,142,143,146,147,149,153,154,165,174,175,176,181,],[6,10,13,25,13,6,25,41,46,46,78,79,80,41,41,107,6,119,135,140,46,41,107,46,46,159,159,135,140,166,46,159,159,135,135,]),'blocks':([4,],[8,]),'declarationList':([5,12,],[11,28,]),'declaration':([5,12,],[12,12,]),'variableType':([5,12,26,89,158,],[14,14,36,117,168,]),'arrayType':([5,12,26,89,158,],[15,15,37,118,169,]),'main':([8,],[21,]),'blockList':([9,24,],[23,33,]),'block':([9,24,],[24,24,]),'blockType':([26,],[34,]),'declarationExtra':([29,59,71,131,],[39,90,103,148,]),'statementPoint':([31,115,142,143,165,],[43,144,154,155,173,]),'statementList':([31,45,115,142,143,165,],[44,75,44,44,44,44,]),'statement':([31,45,115,142,143,165,],[45,45,45,45,45,45,]),'assign':([31,45,115,142,143,165,],[47,47,47,47,47,47,]),'call':([31,38,42,45,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,115,132,139,142,143,162,165,179,],[48,61,61,48,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,48,61,61,48,48,61,48,61,]),'return':([31,45,115,142,143,165,],[49,49,49,49,49,49,]),'ifStatement':([31,45,115,142,143,165,],[50,50,50,50,50,50,]),'whileStatement':([31,45,115,142,143,165,],[51,51,51,51,51,51,]),'location':([31,38,42,45,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,115,132,139,142,143,162,165,179,],[52,60,60,52,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,52,60,60,52,52,60,52,60,]),'expression':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[59,73,84,100,101,108,110,73,113,114,121,122,123,124,125,126,127,128,129,131,136,149,153,73,181,]),'unaryExpression':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'binaryExpression':([38,42,54,68,69,81,82,83,86,87,91,92,93,94,95,96,97,98,99,102,106,132,139,162,179,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'arrayIndexes':([42,83,162,],[72,111,171,]),'parameters':([57,],[88,]),'arrayIndexesExtra':([73,136,],[105,152,]),'actuals':([82,],[109,]),'parameter':([89,],[116,]),'arrayDeclarationExtra':([104,149,176,181,],[133,161,180,182,]),'commaExpressionList':([110,153,],[138,163,]),'parameterExtra':([146,147,174,175,],[157,160,177,178,]),'elseStatement':([154,],[164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> simple","S'",1,None,None,None),
  ('simple -> PROGRAM program ENDPROGRAM','simple',3,'p_simple','simpleParser.py',36),
  ('empty -> <empty>','empty',0,'p_empty','simpleParser.py',40),
  ('program -> variables blocks main','program',3,'p_program','simpleParser.py',43),
  ('variables -> VARIABLES declarationList ENDVARIABLES','variables',3,'p_variables','simpleParser.py',48),
  ('variables -> empty','variables',1,'p_emptyVariables','simpleParser.py',63),
  ('declarationList -> declaration declarationList','declarationList',2,'p_declarationList','simpleParser.py',67),
  ('declarationList -> empty','declarationList',1,'p_emptyDeclarationList','simpleParser.py',71),
  ('declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON','declaration',6,'p_declaration','simpleParser.py',75),
  ('declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON','declaration',9,'p_arrayDeclaration','simpleParser.py',84),
  ('declaration -> variableType IDENTIFIER declarationExtra SEMICOLON','declaration',4,'p_nullDeclaration','simpleParser.py',93),
  ('declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON','declaration',7,'p_arrayNullDeclaration','simpleParser.py',102),
  ('declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra','declarationExtra',5,'p_declarationExtra','simpleParser.py',111),
  ('arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra','arrayDeclarationExtra',8,'p_arrayDeclarationExtra','simpleParser.py',117),
  ('declarationExtra -> COMMA IDENTIFIER declarationExtra','declarationExtra',3,'p_nullDeclarationExtra','simpleParser.py',123),
  ('arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra','arrayDeclarationExtra',6,'p_arrayNullDeclarationExtra','simpleParser.py',129),
  ('declarationExtra -> empty','declarationExtra',1,'p_emptyDeclarationExtra','simpleParser.py',135),
  ('arrayDeclarationExtra -> empty','arrayDeclarationExtra',1,'p_emptyArrayDeclarationExtra','simpleParser.py',139),
  ('arrayIndexes -> expression arrayIndexesExtra','arrayIndexes',2,'p_arrayIndexes','simpleParser.py',143),
  ('arrayIndexesExtra -> COMMA expression arrayIndexesExtra','arrayIndexesExtra',3,'p_arrayIndexesExtra','simpleParser.py',147),
  ('arrayIndexesExtra -> empty','arrayIndexesExtra',1,'p_emptyArrayIndexesExtra','simpleParser.py',151),
  ('blocks -> BLOCKS blockList ENDBLOCKS','blocks',3,'p_blocks','simpleParser.py',155),
  ('blocks -> empty','blocks',1,'p_emptyBlocks','simpleParser.py',167),
  ('blockList -> block blockList','blockList',2,'p_blockList','simpleParser.py',170),
  ('blockList -> empty','blockList',1,'p_emptyBlockList','simpleParser.py',174),
  ('block -> DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINE','block',7,'p_block','simpleParser.py',178),
  ('block -> empty','block',1,'p_emptyBlock','simpleParser.py',182),
  ('blockType -> PROCEDURE','blockType',1,'p_blockType','simpleParser.py',187),
  ('blockType -> variableType','blockType',1,'p_blockType','simpleParser.py',188),
  ('blockType -> arrayType','blockType',1,'p_blockType','simpleParser.py',189),
  ('variableType -> NUMBER','variableType',1,'p_variableType','simpleParser.py',193),
  ('variableType -> WORDS','variableType',1,'p_variableType','simpleParser.py',194),
  ('variableType -> LETTER','variableType',1,'p_variableType','simpleParser.py',195),
  ('variableType -> FLAG','variableType',1,'p_variableType','simpleParser.py',196),
  ('arrayType -> MANYNUMBERS','arrayType',1,'p_arrayType','simpleParser.py',200),
  ('parameters -> OPARENTHESIS parameter CPARENTHESIS','parameters',3,'p_parameters','simpleParser.py',204),
  ('parameter -> variableType IDENTIFIER parameterExtra','parameter',3,'p_parameter','simpleParser.py',207),
  ('parameter -> arrayType IDENTIFIER parameterExtra','parameter',3,'p_arrayParameter','simpleParser.py',210),
  ('parameter -> empty','parameter',1,'p_emptyParameter','simpleParser.py',213),
  ('parameterExtra -> COMMA variableType IDENTIFIER parameterExtra','parameterExtra',4,'p_parameterExtra','simpleParser.py',216),
  ('parameterExtra -> COMMA arrayType IDENTIFIER parameterExtra','parameterExtra',4,'p_arrayParameterExtra','simpleParser.py',219),
  ('parameterExtra -> empty','parameterExtra',1,'p_emptyParameterExtra','simpleParser.py',222),
  ('statementPoint -> statementList','statementPoint',1,'p_statementPoint','simpleParser.py',225),
  ('statementList -> statement statementList','statementList',2,'p_statementList','simpleParser.py',229),
  ('statementList -> empty','statementList',1,'p_emptyStatementList','simpleParser.py',233),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','simpleParser.py',237),
  ('statement -> call SEMICOLON','statement',2,'p_statement','simpleParser.py',238),
  ('statement -> return empty','statement',2,'p_statement','simpleParser.py',239),
  ('statement -> ifStatement empty','statement',2,'p_statement','simpleParser.py',240),
  ('statement -> whileStatement empty','statement',2,'p_statement','simpleParser.py',241),
  ('statement -> empty','statement',1,'p_emptyStatement','simpleParser.py',245),
  ('assign -> location ASSIGNATION expression','assign',3,'p_assign','simpleParser.py',249),
  ('location -> IDENTIFIER','location',1,'p_location','simpleParser.py',255),
  ('location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS','location',4,'p_locationBracket','simpleParser.py',259),
  ('call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS','call',4,'p_call','simpleParser.py',263),
  ('actuals -> expression commaExpressionList','actuals',2,'p_actuals','simpleParser.py',267),
  ('commaExpressionList -> COMMA expression commaExpressionList','commaExpressionList',3,'p_commaExpressionList','simpleParser.py',272),
  ('commaExpressionList -> empty','commaExpressionList',1,'p_emptyCommaExpressionList','simpleParser.py',276),
  ('return -> RETURN expression SEMICOLON','return',3,'p_return','simpleParser.py',280),
  ('return -> RETURN SEMICOLON','return',2,'p_emptyReturn','simpleParser.py',283),
  ('ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF','ifStatement',7,'p_ifStatement','simpleParser.py',286),
  ('elseStatement -> ELSE statementPoint','elseStatement',2,'p_elseStatement','simpleParser.py',292),
  ('elseStatement -> empty','elseStatement',1,'p_emptyElseStatement','simpleParser.py',296),
  ('whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE','whileStatement',6,'p_whileStatement','simpleParser.py',299),
  ('main -> START variables statementPoint FINISH','main',4,'p_main','simpleParser.py',302),
  ('expression -> location','expression',1,'p_expressionLocation','simpleParser.py',306),
  ('expression -> call','expression',1,'p_expressionCall','simpleParser.py',310),
  ('expression -> unaryExpression','expression',1,'p_expressionUnary','simpleParser.py',314),
  ('expression -> binaryExpression','expression',1,'p_expressionBinary','simpleParser.py',318),
  ('expression -> FLAGVALUE','expression',1,'p_expressionTokens','simpleParser.py',322),
  ('expression -> NUMBERVALUE','expression',1,'p_expressionTokens','simpleParser.py',323),
  ('expression -> WORDSVALUE','expression',1,'p_expressionTokens','simpleParser.py',324),
  ('expression -> LETTERVALUE','expression',1,'p_expressionTokens','simpleParser.py',325),
  ('expression -> OPARENTHESIS expression CPARENTHESIS','expression',3,'p_parentesisExpression','simpleParser.py',329),
  ('binaryExpression -> expression OR expression','binaryExpression',3,'p_binaryExpressionOr','simpleParser.py',333),
  ('binaryExpression -> expression AND expression','binaryExpression',3,'p_binaryExpressionAnd','simpleParser.py',337),
  ('binaryExpression -> expression LESSER expression','binaryExpression',3,'p_binaryExpressionLessThan','simpleParser.py',341),
  ('binaryExpression -> expression GREATER expression','binaryExpression',3,'p_binaryExpressionGreaterThan','simpleParser.py',345),
  ('binaryExpression -> expression EQUALITY expression','binaryExpression',3,'p_binaryExpressionEquality','simpleParser.py',349),
  ('binaryExpression -> expression PLUS expression','binaryExpression',3,'p_binaryExpressionPlus','simpleParser.py',353),
  ('binaryExpression -> expression MINUS expression','binaryExpression',3,'p_binaryExpressionMinus','simpleParser.py',357),
  ('binaryExpression -> expression MULTIPLICATION expression','binaryExpression',3,'p_binaryExpressionMultiplication','simpleParser.py',362),
  ('binaryExpression -> expression DIVISION expression','binaryExpression',3,'p_binaryExpressionDivision','simpleParser.py',366),
  ('unaryExpression -> NOT expression','unaryExpression',2,'p_unaryExpressionNOT','simpleParser.py',370),
]
