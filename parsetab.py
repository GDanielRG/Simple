
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNATIONleftORleftANDleftEQUALITYleftGREATERLESSERleftPLUSMINUSleftMULTIPLICATIONDIVISIONMODULUSrightNOTNOT AND OR START FINISH WORDS NUMBER LETTER PROCEDURE FLAG IF ENDIF DEFINE ENDDEFINE WHILE ENDWHILE ELSE BLOCKS ENDBLOCKS VARIABLES ENDVARIABLES PROGRAM ENDPROGRAM DISPLAY TRUE FALSE RETURN GREATER LESSER EQUALITY ASSIGNATION PLUS MINUS MULTIPLICATION DIVISION MODULUS NUMBERVALUE FLAGVALUE LETTERVALUE WORDSVALUE IDENTIFIER NEWLINE COMMA SEMICOLON OPARENTHESIS CPARENTHESIS OBRACKETS CBRACKETSsimple : PROGRAM program ENDPROGRAMempty :program : variables blocks mainvariables : VARIABLES declaration ENDVARIABLESvariables : emptydeclaration : variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declarationdeclaration : variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declarationdeclaration : variableType IDENTIFIER declarationExtra SEMICOLON declarationdeclaration : emptydeclarationExtra : COMMA IDENTIFIER ASSIGNATION expression declarationExtradeclarationExtra : COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtradeclarationExtra : COMMA IDENTIFIER declarationExtradeclarationExtra : COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtradeclarationExtra : emptyarrayIndexes : expression arrayIndexesExtraarrayIndexesExtra : COMMA expression arrayIndexesExtraarrayIndexesExtra : emptyblocks : BLOCKS block ENDBLOCKSblocks : emptyblock : DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE blockblock : emptyblockType : PROCEDURE\n                  | variableTypevariableType : NUMBER \n                  | WORDS\n                  | LETTERparameters : OPARENTHESIS parameter CPARENTHESIS parameter : variableType IDENTIFIER parameterExtraparameter : emptyparameterExtra : COMMA variableType IDENTIFIER parameterExtraparameterExtra : emptystatement : assign SEMICOLON statement\n                   | call SEMICOLON statement\n                   | return  empty statement\n                   | ifStatement empty statement\n                   | whileStatement empty statementstatement : emptyassign : location ASSIGNATION expression location : IDENTIFIERlocation : IDENTIFIER OBRACKETS arrayIndexes CBRACKETSlocation : callcall : IDENTIFIER OPARENTHESIS actuals CPARENTHESISactuals : expression commaExpressionListcommaExpressionList : commaExpression commaExpressionListcommaExpressionList : emptycommaExpression : COMMA expressionreturn : RETURN returnExpression SEMICOLONreturnExpression : expressionreturnExpression : emptyifStatement : IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIFelseStatement : ELSE statementelseStatement : emptywhileStatement : WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILEmain : START variables statement FINISH expression : locationexpression : binaryExpressionexpression : FLAGVALUE\n                  | NUMBERVALUE\n                  | WORDSVALUE\n                  | LETTERVALUEexpression : OPARENTHESIS expression CPARENTHESISbinaryExpression : expression OR expressionbinaryExpression : expression AND expressionbinaryExpression : expression LESSER expressionbinaryExpression : expression GREATER expressionbinaryExpression : expression EQUALITY expressionbinaryExpression : expression PLUS expressionbinaryExpression : expression MINUS expressionbinaryExpression : expression MULTIPLICATION expressionbinaryExpression : expression DIVISION expressionbinaryExpression : expression MODULUS expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,],[0,-1,]),'VARIABLES':([2,18,75,138,],[5,5,5,-27,]),'BLOCKS':([2,4,6,22,],[-2,9,-5,-4,]),'START':([2,4,6,8,10,22,25,],[-2,-2,-5,18,-19,-4,-18,]),'ENDPROGRAM':([3,17,61,],[7,-3,-54,]),'NUMBER':([5,20,57,76,113,151,162,],[14,14,14,14,14,14,14,]),'WORDS':([5,20,57,76,113,151,162,],[15,15,15,15,15,15,15,]),'LETTER':([5,20,57,76,113,151,162,],[16,16,16,16,16,16,16,]),'ENDVARIABLES':([5,11,13,57,89,113,140,162,167,],[-2,22,-9,-2,-8,-2,-6,-2,-7,]),'IDENTIFIER':([6,12,14,15,16,18,22,24,26,27,28,29,31,32,37,39,40,43,55,62,63,64,65,66,67,68,69,73,74,75,78,79,80,81,82,83,84,85,86,87,92,94,96,106,109,111,125,133,135,136,138,154,157,159,161,164,],[-5,23,-24,-25,-26,-2,-4,42,46,-22,-23,47,47,60,-2,-2,-2,47,47,42,42,42,42,42,47,47,47,47,47,-2,47,47,47,47,47,47,47,47,47,47,47,47,47,-47,42,139,47,47,42,42,-27,47,42,-53,166,-50,]),'RETURN':([6,18,22,24,37,39,40,62,63,64,65,66,75,106,109,135,136,138,157,159,164,],[-5,-2,-4,43,-2,-2,-2,43,43,43,43,43,-2,-47,43,43,43,-27,43,-53,-50,]),'IF':([6,18,22,24,37,39,40,62,63,64,65,66,75,106,109,135,136,138,157,159,164,],[-5,-2,-4,44,-2,-2,-2,44,44,44,44,44,-2,-47,44,44,44,-27,44,-53,-50,]),'WHILE':([6,18,22,24,37,39,40,62,63,64,65,66,75,106,109,135,136,138,157,159,164,],[-5,-2,-4,45,-2,-2,-2,45,45,45,45,45,-2,-47,45,45,45,-27,45,-53,-50,]),'FINISH':([6,18,22,24,34,37,38,39,40,62,63,64,65,66,97,98,99,100,101,106,159,164,],[-5,-2,-4,-2,61,-2,-37,-2,-2,-2,-2,-2,-2,-2,-32,-33,-34,-35,-36,-47,-53,-50,]),'ENDDEFINE':([6,22,37,38,39,40,62,63,64,65,66,75,97,98,99,100,101,106,109,137,138,159,164,],[-5,-4,-2,-37,-2,-2,-2,-2,-2,-2,-2,-2,-32,-33,-34,-35,-36,-47,-2,149,-27,-53,-50,]),'DEFINE':([9,149,],[20,20,]),'ENDBLOCKS':([9,19,21,149,160,],[-2,25,-21,-2,-20,]),'PROCEDURE':([20,],[27,]),'ASSIGNATION':([23,36,41,42,60,90,129,134,144,],[29,-41,67,-39,94,125,-42,-40,154,]),'OBRACKETS':([23,42,47,60,],[31,69,69,96,]),'COMMA':([23,47,48,49,50,51,52,53,54,56,59,60,104,114,115,116,117,118,119,120,121,122,123,124,126,127,129,131,134,139,141,144,146,163,166,],[32,-39,32,-55,-56,-57,-58,-59,-60,-41,92,32,133,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-61,92,32,-42,133,-40,151,32,32,-46,32,151,]),'SEMICOLON':([23,30,33,35,36,43,47,48,49,50,51,52,53,54,56,60,70,71,72,77,95,102,114,115,116,117,118,119,120,121,122,123,124,127,129,134,141,143,144,153,155,163,168,],[-2,57,-14,62,63,-2,-39,-2,-55,-56,-57,-58,-59,-60,-41,-2,106,-48,-49,113,-12,-38,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-61,-2,-42,-40,-2,-10,-2,162,-13,-2,-11,]),'FLAGVALUE':([29,31,43,55,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,125,133,154,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'NUMBERVALUE':([29,31,43,55,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,125,133,154,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'WORDSVALUE':([29,31,43,55,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,125,133,154,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'LETTERVALUE':([29,31,43,55,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,125,133,154,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'OPARENTHESIS':([29,31,42,43,44,45,46,47,55,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,125,133,154,],[55,55,68,55,73,74,76,68,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'ELSE':([37,38,39,40,62,63,64,65,66,97,98,99,100,101,106,135,147,159,164,],[-2,-37,-2,-2,-2,-2,-2,-2,-2,-32,-33,-34,-35,-36,-47,-2,157,-53,-50,]),'ENDIF':([37,38,39,40,62,63,64,65,66,97,98,99,100,101,106,135,147,156,157,158,159,164,165,],[-2,-37,-2,-2,-2,-2,-2,-2,-2,-32,-33,-34,-35,-36,-47,-2,-2,164,-2,-52,-53,-50,-51,]),'ENDWHILE':([37,38,39,40,62,63,64,65,66,97,98,99,100,101,106,136,148,159,164,],[-2,-37,-2,-2,-2,-2,-2,-2,-2,-32,-33,-34,-35,-36,-47,-2,159,-53,-50,]),'OR':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,78,-55,-56,-57,-58,-59,-60,-41,78,78,78,78,78,78,78,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-61,78,78,-42,-40,78,78,78,]),'AND':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,79,-55,-56,-57,-58,-59,-60,-41,79,79,79,79,79,79,79,79,-63,-64,-65,-66,-67,-68,-69,-70,-71,-61,79,79,-42,-40,79,79,79,]),'LESSER':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,80,-55,-56,-57,-58,-59,-60,-41,80,80,80,80,80,80,80,80,80,-64,-65,80,-67,-68,-69,-70,-71,-61,80,80,-42,-40,80,80,80,]),'GREATER':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,81,-55,-56,-57,-58,-59,-60,-41,81,81,81,81,81,81,81,81,81,-64,-65,81,-67,-68,-69,-70,-71,-61,81,81,-42,-40,81,81,81,]),'EQUALITY':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,82,-55,-56,-57,-58,-59,-60,-41,82,82,82,82,82,82,82,82,82,-64,-65,-66,-67,-68,-69,-70,-71,-61,82,82,-42,-40,82,82,82,]),'PLUS':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,83,-55,-56,-57,-58,-59,-60,-41,83,83,83,83,83,83,83,83,83,83,83,83,-67,-68,-69,-70,-71,-61,83,83,-42,-40,83,83,83,]),'MINUS':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,84,-55,-56,-57,-58,-59,-60,-41,84,84,84,84,84,84,84,84,84,84,84,84,-67,-68,-69,-70,-71,-61,84,84,-42,-40,84,84,84,]),'MULTIPLICATION':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,85,-55,-56,-57,-58,-59,-60,-41,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-69,-70,-71,-61,85,85,-42,-40,85,85,85,]),'DIVISION':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,86,-55,-56,-57,-58,-59,-60,-41,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-69,-70,-71,-61,86,86,-42,-40,86,86,86,]),'MODULUS':([47,48,49,50,51,52,53,54,56,59,71,88,102,104,107,108,114,115,116,117,118,119,120,121,122,123,124,126,127,129,134,141,146,163,],[-39,87,-55,-56,-57,-58,-59,-60,-41,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-69,-70,-71,-61,87,87,-42,-40,87,87,87,]),'CBRACKETS':([47,49,50,51,52,53,54,56,58,59,91,93,105,114,115,116,117,118,119,120,121,122,123,124,126,128,129,134,142,],[-39,-55,-56,-57,-58,-59,-60,-41,90,-2,-15,-17,134,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-61,-2,144,-42,-40,-16,]),'CPARENTHESIS':([47,49,50,51,52,53,54,56,76,88,103,104,107,108,110,112,114,115,116,117,118,119,120,121,122,123,124,129,130,131,132,134,139,145,146,150,152,166,169,],[-39,-55,-56,-57,-58,-59,-60,-41,-2,124,129,-2,135,136,138,-29,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-61,-42,-43,-2,-45,-40,-2,-44,-46,-28,-31,-2,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'simple':([0,],[1,]),'program':([2,],[3,]),'variables':([2,18,75,],[4,24,109,]),'empty':([2,4,5,9,18,23,24,37,39,40,43,48,57,59,60,62,63,64,65,66,75,76,104,109,113,126,127,131,135,136,139,141,144,147,149,157,162,163,166,],[6,10,13,21,6,33,38,64,65,66,72,33,13,93,33,38,38,38,38,38,6,112,132,38,13,93,33,132,38,38,152,33,33,158,21,38,13,33,152,]),'blocks':([4,],[8,]),'declaration':([5,57,113,162,],[11,89,140,167,]),'variableType':([5,20,57,76,113,151,162,],[12,28,12,111,12,161,12,]),'main':([8,],[17,]),'block':([9,149,],[19,160,]),'blockType':([20,],[26,]),'declarationExtra':([23,48,60,127,141,144,163,],[30,77,95,143,153,155,168,]),'statement':([24,62,63,64,65,66,109,135,136,157,],[34,97,98,99,100,101,137,147,148,165,]),'assign':([24,62,63,64,65,66,109,135,136,157,],[35,35,35,35,35,35,35,35,35,35,]),'call':([24,29,31,43,55,62,63,64,65,66,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,109,125,133,135,136,154,157,],[36,56,56,56,56,36,36,36,36,36,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,36,56,56,36,36,56,36,]),'return':([24,62,63,64,65,66,109,135,136,157,],[37,37,37,37,37,37,37,37,37,37,]),'ifStatement':([24,62,63,64,65,66,109,135,136,157,],[39,39,39,39,39,39,39,39,39,39,]),'whileStatement':([24,62,63,64,65,66,109,135,136,157,],[40,40,40,40,40,40,40,40,40,40,]),'location':([24,29,31,43,55,62,63,64,65,66,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,109,125,133,135,136,154,157,],[41,49,49,49,49,41,41,41,41,41,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,41,49,49,41,41,49,41,]),'expression':([29,31,43,55,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,125,133,154,],[48,59,71,88,102,104,59,107,108,114,115,116,117,118,119,120,121,122,123,126,127,59,141,146,163,]),'binaryExpression':([29,31,43,55,67,68,69,73,74,78,79,80,81,82,83,84,85,86,87,92,94,96,125,133,154,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'arrayIndexes':([31,69,96,],[58,105,128,]),'returnExpression':([43,],[70,]),'parameters':([46,],[75,]),'arrayIndexesExtra':([59,126,],[91,142,]),'actuals':([68,],[103,]),'parameter':([76,],[110,]),'commaExpressionList':([104,131,],[130,145,]),'commaExpression':([104,131,],[131,131,]),'parameterExtra':([139,166,],[150,169,]),'elseStatement':([147,],[156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> simple","S'",1,None,None,None),
  ('simple -> PROGRAM program ENDPROGRAM','simple',3,'p_simple','simpleParser.py',22),
  ('empty -> <empty>','empty',0,'p_empty','simpleParser.py',26),
  ('program -> variables blocks main','program',3,'p_program','simpleParser.py',30),
  ('variables -> VARIABLES declaration ENDVARIABLES','variables',3,'p_variables','simpleParser.py',34),
  ('variables -> empty','variables',1,'p_emptyVariables','simpleParser.py',38),
  ('declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration','declaration',7,'p_declaration','simpleParser.py',42),
  ('declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration','declaration',10,'p_arrayDeclaration','simpleParser.py',46),
  ('declaration -> variableType IDENTIFIER declarationExtra SEMICOLON declaration','declaration',5,'p_nullDeclaration','simpleParser.py',50),
  ('declaration -> empty','declaration',1,'p_emptyDeclaration','simpleParser.py',54),
  ('declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra','declarationExtra',5,'p_declarationExtra','simpleParser.py',58),
  ('declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra','declarationExtra',8,'p_arrayDeclarationExtra','simpleParser.py',62),
  ('declarationExtra -> COMMA IDENTIFIER declarationExtra','declarationExtra',3,'p_nullDeclarationExtra','simpleParser.py',66),
  ('declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra','declarationExtra',6,'p_array_nullDeclarationExtra','simpleParser.py',70),
  ('declarationExtra -> empty','declarationExtra',1,'p_emptyDeclarationExtra','simpleParser.py',74),
  ('arrayIndexes -> expression arrayIndexesExtra','arrayIndexes',2,'p_arrayIndexes','simpleParser.py',78),
  ('arrayIndexesExtra -> COMMA expression arrayIndexesExtra','arrayIndexesExtra',3,'p_arrayIndexesExtra','simpleParser.py',82),
  ('arrayIndexesExtra -> empty','arrayIndexesExtra',1,'p_emptyArrayIndexesExtra','simpleParser.py',86),
  ('blocks -> BLOCKS block ENDBLOCKS','blocks',3,'p_blocks','simpleParser.py',90),
  ('blocks -> empty','blocks',1,'p_emptyBlocks','simpleParser.py',94),
  ('block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block','block',8,'p_block','simpleParser.py',98),
  ('block -> empty','block',1,'p_emptyBlock','simpleParser.py',102),
  ('blockType -> PROCEDURE','blockType',1,'p_blockType','simpleParser.py',107),
  ('blockType -> variableType','blockType',1,'p_blockType','simpleParser.py',108),
  ('variableType -> NUMBER','variableType',1,'p_variableType','simpleParser.py',112),
  ('variableType -> WORDS','variableType',1,'p_variableType','simpleParser.py',113),
  ('variableType -> LETTER','variableType',1,'p_variableType','simpleParser.py',114),
  ('parameters -> OPARENTHESIS parameter CPARENTHESIS','parameters',3,'p_parameters','simpleParser.py',118),
  ('parameter -> variableType IDENTIFIER parameterExtra','parameter',3,'p_parameter','simpleParser.py',122),
  ('parameter -> empty','parameter',1,'p_emptyParameter','simpleParser.py',126),
  ('parameterExtra -> COMMA variableType IDENTIFIER parameterExtra','parameterExtra',4,'p_parameterExtra','simpleParser.py',130),
  ('parameterExtra -> empty','parameterExtra',1,'p_emptyParameterExtra','simpleParser.py',134),
  ('statement -> assign SEMICOLON statement','statement',3,'p_statement','simpleParser.py',138),
  ('statement -> call SEMICOLON statement','statement',3,'p_statement','simpleParser.py',139),
  ('statement -> return empty statement','statement',3,'p_statement','simpleParser.py',140),
  ('statement -> ifStatement empty statement','statement',3,'p_statement','simpleParser.py',141),
  ('statement -> whileStatement empty statement','statement',3,'p_statement','simpleParser.py',142),
  ('statement -> empty','statement',1,'p_emptyStatement','simpleParser.py',149),
  ('assign -> location ASSIGNATION expression','assign',3,'p_assign','simpleParser.py',161),
  ('location -> IDENTIFIER','location',1,'p_location','simpleParser.py',166),
  ('location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS','location',4,'p_locationBracket','simpleParser.py',170),
  ('location -> call','location',1,'p_locationCall','simpleParser.py',174),
  ('call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS','call',4,'p_call','simpleParser.py',178),
  ('actuals -> expression commaExpressionList','actuals',2,'p_actuals','simpleParser.py',182),
  ('commaExpressionList -> commaExpression commaExpressionList','commaExpressionList',2,'p_commaExpressionList','simpleParser.py',186),
  ('commaExpressionList -> empty','commaExpressionList',1,'p_emptyCommaExpressionList','simpleParser.py',190),
  ('commaExpression -> COMMA expression','commaExpression',2,'p_commaExpression','simpleParser.py',194),
  ('return -> RETURN returnExpression SEMICOLON','return',3,'p_return','simpleParser.py',198),
  ('returnExpression -> expression','returnExpression',1,'p_returnExpression','simpleParser.py',202),
  ('returnExpression -> empty','returnExpression',1,'p_emptyReturnExpression','simpleParser.py',206),
  ('ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF','ifStatement',7,'p_ifStatement','simpleParser.py',210),
  ('elseStatement -> ELSE statement','elseStatement',2,'p_elseStatement','simpleParser.py',214),
  ('elseStatement -> empty','elseStatement',1,'p_emptyElseStatement','simpleParser.py',218),
  ('whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE','whileStatement',6,'p_whileStatement','simpleParser.py',222),
  ('main -> START variables statement FINISH','main',4,'p_main','simpleParser.py',226),
  ('expression -> location','expression',1,'p_expressionLocation','simpleParser.py',230),
  ('expression -> binaryExpression','expression',1,'p_expressionBinary','simpleParser.py',234),
  ('expression -> FLAGVALUE','expression',1,'p_expressionTokens','simpleParser.py',238),
  ('expression -> NUMBERVALUE','expression',1,'p_expressionTokens','simpleParser.py',239),
  ('expression -> WORDSVALUE','expression',1,'p_expressionTokens','simpleParser.py',240),
  ('expression -> LETTERVALUE','expression',1,'p_expressionTokens','simpleParser.py',241),
  ('expression -> OPARENTHESIS expression CPARENTHESIS','expression',3,'p_parentesisExpression','simpleParser.py',245),
  ('binaryExpression -> expression OR expression','binaryExpression',3,'p_binaryExpressionOr','simpleParser.py',249),
  ('binaryExpression -> expression AND expression','binaryExpression',3,'p_binaryExpressionAnd','simpleParser.py',253),
  ('binaryExpression -> expression LESSER expression','binaryExpression',3,'p_binaryExpressionLessThan','simpleParser.py',257),
  ('binaryExpression -> expression GREATER expression','binaryExpression',3,'p_binaryExpressionGreaterThan','simpleParser.py',261),
  ('binaryExpression -> expression EQUALITY expression','binaryExpression',3,'p_binaryExpressionEquality','simpleParser.py',265),
  ('binaryExpression -> expression PLUS expression','binaryExpression',3,'p_binaryExpressionPlus','simpleParser.py',269),
  ('binaryExpression -> expression MINUS expression','binaryExpression',3,'p_binaryExpressionMinus','simpleParser.py',273),
  ('binaryExpression -> expression MULTIPLICATION expression','binaryExpression',3,'p_binaryExpressionMultiplication','simpleParser.py',277),
  ('binaryExpression -> expression DIVISION expression','binaryExpression',3,'p_binaryExpressionDivision','simpleParser.py',281),
  ('binaryExpression -> expression MODULUS expression','binaryExpression',3,'p_binaryExpressionModulus','simpleParser.py',285),
]
