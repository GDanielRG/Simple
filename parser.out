Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    NOT
    AND
    OR
    TOGGLE
    IF
    ENDIF
    WHILE
    ENDWHILE
    ELSE
    DISPLAY
    TRUE
    FALSE
    RETURN
    GREATER
    LESSER
    EQUALITY
    NEWLINE
    OBRACKETS
    CBRACKETS

Grammar

Rule 0     S' -> simple
Rule 1     simple -> PROGRAM program ENDPROGRAM
Rule 2     empty -> <empty>
Rule 3     program -> variables blocks main
Rule 4     variables -> VARIABLES declaration ENDVARIABLES
Rule 5     variables -> empty
Rule 6     declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
Rule 7     declaration -> empty
Rule 8     declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra
Rule 9     declarationExtra -> empty
Rule 10    blocks -> BLOCKS block ENDBLOCKS
Rule 11    blocks -> empty
Rule 12    block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block
Rule 13    block -> empty
Rule 14    blockType -> PROCEDURE
Rule 15    blockType -> variableType
Rule 16    variableType -> NUMBER
Rule 17    variableType -> WORDS
Rule 18    variableType -> LETTER
Rule 19    parameters -> OPARENTHESIS parameter CPARENTHESIS
Rule 20    parameter -> variableType IDENTIFIER parameterExtra
Rule 21    parameter -> empty
Rule 22    parameterExtra -> COMMA variableType IDENTIFIER parameterExtra
Rule 23    parameterExtra -> empty
Rule 24    statement -> empty
Rule 25    main -> START variables statement FINISH
Rule 26    expression -> expression PLUS term
Rule 27    expression -> expression MINUS term
Rule 28    expression -> term
Rule 29    term -> term MULTIPLICATION factor
Rule 30    term -> term DIVISION factor
Rule 31    term -> factor
Rule 32    factor -> NUMBERVALUE
Rule 33    factor -> WORDSVALUE
Rule 34    factor -> LETTERVALUE
Rule 35    factor -> OPARENTHESIS expression CPARENTHESIS

Terminals, with rules where they appear

AND                  : 
ASSIGNATION          : 6 8
BLOCKS               : 10
CBRACKETS            : 
COMMA                : 8 22
CPARENTHESIS         : 19 35
DEFINE               : 12
DISPLAY              : 
DIVISION             : 30
ELSE                 : 
ENDBLOCKS            : 10
ENDDEFINE            : 12
ENDIF                : 
ENDPROGRAM           : 1
ENDVARIABLES         : 4
ENDWHILE             : 
EQUALITY             : 
FALSE                : 
FINISH               : 25
GREATER              : 
IDENTIFIER           : 6 8 12 20 22
IF                   : 
LESSER               : 
LETTER               : 18
LETTERVALUE          : 34
MINUS                : 27
MULTIPLICATION       : 29
NEWLINE              : 
NOT                  : 
NUMBER               : 16
NUMBERVALUE          : 32
OBRACKETS            : 
OPARENTHESIS         : 19 35
OR                   : 
PLUS                 : 26
PROCEDURE            : 14
PROGRAM              : 1
RETURN               : 
SEMICOLON            : 6
START                : 25
TOGGLE               : 
TRUE                 : 
VARIABLES            : 4
WHILE                : 
WORDS                : 17
WORDSVALUE           : 33
error                : 

Nonterminals, with rules where they appear

block                : 10 12
blockType            : 12
blocks               : 3
declaration          : 4 6
declarationExtra     : 6 8
empty                : 5 7 9 11 13 21 23 24
expression           : 6 8 26 27 35
factor               : 29 30 31
main                 : 3
parameter            : 19
parameterExtra       : 20 22
parameters           : 12
program              : 1
simple               : 0
statement            : 12 25
term                 : 26 27 28 29 30
variableType         : 6 15 20 22
variables            : 3 12 25

Parsing method: LALR

state 0

    (0) S' -> . simple
    (1) simple -> . PROGRAM program ENDPROGRAM

    PROGRAM         shift and go to state 2

    simple                         shift and go to state 1

state 1

    (0) S' -> simple .



state 2

    (1) simple -> PROGRAM . program ENDPROGRAM
    (3) program -> . variables blocks main
    (4) variables -> . VARIABLES declaration ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    BLOCKS          reduce using rule 2 (empty -> .)
    START           reduce using rule 2 (empty -> .)

    program                        shift and go to state 3
    variables                      shift and go to state 4
    empty                          shift and go to state 6

state 3

    (1) simple -> PROGRAM program . ENDPROGRAM

    ENDPROGRAM      shift and go to state 7


state 4

    (3) program -> variables . blocks main
    (10) blocks -> . BLOCKS block ENDBLOCKS
    (11) blocks -> . empty
    (2) empty -> .

    BLOCKS          shift and go to state 9
    START           reduce using rule 2 (empty -> .)

    blocks                         shift and go to state 8
    empty                          shift and go to state 10

state 5

    (4) variables -> VARIABLES . declaration ENDVARIABLES
    (6) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> . empty
    (16) variableType -> . NUMBER
    (17) variableType -> . WORDS
    (18) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 14
    WORDS           shift and go to state 15
    LETTER          shift and go to state 16
    ENDVARIABLES    reduce using rule 2 (empty -> .)

    declaration                    shift and go to state 11
    variableType                   shift and go to state 12
    empty                          shift and go to state 13

state 6

    (5) variables -> empty .

    BLOCKS          reduce using rule 5 (variables -> empty .)
    START           reduce using rule 5 (variables -> empty .)
    FINISH          reduce using rule 5 (variables -> empty .)
    ENDDEFINE       reduce using rule 5 (variables -> empty .)


state 7

    (1) simple -> PROGRAM program ENDPROGRAM .

    $end            reduce using rule 1 (simple -> PROGRAM program ENDPROGRAM .)


state 8

    (3) program -> variables blocks . main
    (25) main -> . START variables statement FINISH

    START           shift and go to state 18

    main                           shift and go to state 17

state 9

    (10) blocks -> BLOCKS . block ENDBLOCKS
    (12) block -> . DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block
    (13) block -> . empty
    (2) empty -> .

    DEFINE          shift and go to state 20
    ENDBLOCKS       reduce using rule 2 (empty -> .)

    block                          shift and go to state 19
    empty                          shift and go to state 21

state 10

    (11) blocks -> empty .

    START           reduce using rule 11 (blocks -> empty .)


state 11

    (4) variables -> VARIABLES declaration . ENDVARIABLES

    ENDVARIABLES    shift and go to state 22


state 12

    (6) declaration -> variableType . IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration

    IDENTIFIER      shift and go to state 23


state 13

    (7) declaration -> empty .

    ENDVARIABLES    reduce using rule 7 (declaration -> empty .)


state 14

    (16) variableType -> NUMBER .

    IDENTIFIER      reduce using rule 16 (variableType -> NUMBER .)


state 15

    (17) variableType -> WORDS .

    IDENTIFIER      reduce using rule 17 (variableType -> WORDS .)


state 16

    (18) variableType -> LETTER .

    IDENTIFIER      reduce using rule 18 (variableType -> LETTER .)


state 17

    (3) program -> variables blocks main .

    ENDPROGRAM      reduce using rule 3 (program -> variables blocks main .)


state 18

    (25) main -> START . variables statement FINISH
    (4) variables -> . VARIABLES declaration ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    FINISH          reduce using rule 2 (empty -> .)

    variables                      shift and go to state 24
    empty                          shift and go to state 6

state 19

    (10) blocks -> BLOCKS block . ENDBLOCKS

    ENDBLOCKS       shift and go to state 25


state 20

    (12) block -> DEFINE . blockType IDENTIFIER parameters variables statement ENDDEFINE block
    (14) blockType -> . PROCEDURE
    (15) blockType -> . variableType
    (16) variableType -> . NUMBER
    (17) variableType -> . WORDS
    (18) variableType -> . LETTER

    PROCEDURE       shift and go to state 27
    NUMBER          shift and go to state 14
    WORDS           shift and go to state 15
    LETTER          shift and go to state 16

    blockType                      shift and go to state 26
    variableType                   shift and go to state 28

state 21

    (13) block -> empty .

    ENDBLOCKS       reduce using rule 13 (block -> empty .)


state 22

    (4) variables -> VARIABLES declaration ENDVARIABLES .

    BLOCKS          reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    START           reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    FINISH          reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    ENDDEFINE       reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)


state 23

    (6) declaration -> variableType IDENTIFIER . ASSIGNATION expression declarationExtra SEMICOLON declaration

    ASSIGNATION     shift and go to state 29


state 24

    (25) main -> START variables . statement FINISH
    (24) statement -> . empty
    (2) empty -> .

    FINISH          reduce using rule 2 (empty -> .)

    statement                      shift and go to state 30
    empty                          shift and go to state 31

state 25

    (10) blocks -> BLOCKS block ENDBLOCKS .

    START           reduce using rule 10 (blocks -> BLOCKS block ENDBLOCKS .)


state 26

    (12) block -> DEFINE blockType . IDENTIFIER parameters variables statement ENDDEFINE block

    IDENTIFIER      shift and go to state 32


state 27

    (14) blockType -> PROCEDURE .

    IDENTIFIER      reduce using rule 14 (blockType -> PROCEDURE .)


state 28

    (15) blockType -> variableType .

    IDENTIFIER      reduce using rule 15 (blockType -> variableType .)


state 29

    (6) declaration -> variableType IDENTIFIER ASSIGNATION . expression declarationExtra SEMICOLON declaration
    (26) expression -> . expression PLUS term
    (27) expression -> . expression MINUS term
    (28) expression -> . term
    (29) term -> . term MULTIPLICATION factor
    (30) term -> . term DIVISION factor
    (31) term -> . factor
    (32) factor -> . NUMBERVALUE
    (33) factor -> . WORDSVALUE
    (34) factor -> . LETTERVALUE
    (35) factor -> . OPARENTHESIS expression CPARENTHESIS

    NUMBERVALUE     shift and go to state 36
    WORDSVALUE      shift and go to state 37
    LETTERVALUE     shift and go to state 38
    OPARENTHESIS    shift and go to state 39

    expression                     shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35

state 30

    (25) main -> START variables statement . FINISH

    FINISH          shift and go to state 40


state 31

    (24) statement -> empty .

    FINISH          reduce using rule 24 (statement -> empty .)
    ENDDEFINE       reduce using rule 24 (statement -> empty .)


state 32

    (12) block -> DEFINE blockType IDENTIFIER . parameters variables statement ENDDEFINE block
    (19) parameters -> . OPARENTHESIS parameter CPARENTHESIS

    OPARENTHESIS    shift and go to state 42

    parameters                     shift and go to state 41

state 33

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression . declarationExtra SEMICOLON declaration
    (26) expression -> expression . PLUS term
    (27) expression -> expression . MINUS term
    (8) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (9) declarationExtra -> . empty
    (2) empty -> .

    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 43
    empty                          shift and go to state 47

state 34

    (28) expression -> term .
    (29) term -> term . MULTIPLICATION factor
    (30) term -> term . DIVISION factor

    PLUS            reduce using rule 28 (expression -> term .)
    MINUS           reduce using rule 28 (expression -> term .)
    COMMA           reduce using rule 28 (expression -> term .)
    SEMICOLON       reduce using rule 28 (expression -> term .)
    CPARENTHESIS    reduce using rule 28 (expression -> term .)
    MULTIPLICATION  shift and go to state 48
    DIVISION        shift and go to state 49


state 35

    (31) term -> factor .

    MULTIPLICATION  reduce using rule 31 (term -> factor .)
    DIVISION        reduce using rule 31 (term -> factor .)
    PLUS            reduce using rule 31 (term -> factor .)
    MINUS           reduce using rule 31 (term -> factor .)
    COMMA           reduce using rule 31 (term -> factor .)
    SEMICOLON       reduce using rule 31 (term -> factor .)
    CPARENTHESIS    reduce using rule 31 (term -> factor .)


state 36

    (32) factor -> NUMBERVALUE .

    MULTIPLICATION  reduce using rule 32 (factor -> NUMBERVALUE .)
    DIVISION        reduce using rule 32 (factor -> NUMBERVALUE .)
    PLUS            reduce using rule 32 (factor -> NUMBERVALUE .)
    MINUS           reduce using rule 32 (factor -> NUMBERVALUE .)
    COMMA           reduce using rule 32 (factor -> NUMBERVALUE .)
    SEMICOLON       reduce using rule 32 (factor -> NUMBERVALUE .)
    CPARENTHESIS    reduce using rule 32 (factor -> NUMBERVALUE .)


state 37

    (33) factor -> WORDSVALUE .

    MULTIPLICATION  reduce using rule 33 (factor -> WORDSVALUE .)
    DIVISION        reduce using rule 33 (factor -> WORDSVALUE .)
    PLUS            reduce using rule 33 (factor -> WORDSVALUE .)
    MINUS           reduce using rule 33 (factor -> WORDSVALUE .)
    COMMA           reduce using rule 33 (factor -> WORDSVALUE .)
    SEMICOLON       reduce using rule 33 (factor -> WORDSVALUE .)
    CPARENTHESIS    reduce using rule 33 (factor -> WORDSVALUE .)


state 38

    (34) factor -> LETTERVALUE .

    MULTIPLICATION  reduce using rule 34 (factor -> LETTERVALUE .)
    DIVISION        reduce using rule 34 (factor -> LETTERVALUE .)
    PLUS            reduce using rule 34 (factor -> LETTERVALUE .)
    MINUS           reduce using rule 34 (factor -> LETTERVALUE .)
    COMMA           reduce using rule 34 (factor -> LETTERVALUE .)
    SEMICOLON       reduce using rule 34 (factor -> LETTERVALUE .)
    CPARENTHESIS    reduce using rule 34 (factor -> LETTERVALUE .)


state 39

    (35) factor -> OPARENTHESIS . expression CPARENTHESIS
    (26) expression -> . expression PLUS term
    (27) expression -> . expression MINUS term
    (28) expression -> . term
    (29) term -> . term MULTIPLICATION factor
    (30) term -> . term DIVISION factor
    (31) term -> . factor
    (32) factor -> . NUMBERVALUE
    (33) factor -> . WORDSVALUE
    (34) factor -> . LETTERVALUE
    (35) factor -> . OPARENTHESIS expression CPARENTHESIS

    NUMBERVALUE     shift and go to state 36
    WORDSVALUE      shift and go to state 37
    LETTERVALUE     shift and go to state 38
    OPARENTHESIS    shift and go to state 39

    expression                     shift and go to state 50
    term                           shift and go to state 34
    factor                         shift and go to state 35

state 40

    (25) main -> START variables statement FINISH .

    ENDPROGRAM      reduce using rule 25 (main -> START variables statement FINISH .)


state 41

    (12) block -> DEFINE blockType IDENTIFIER parameters . variables statement ENDDEFINE block
    (4) variables -> . VARIABLES declaration ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    ENDDEFINE       reduce using rule 2 (empty -> .)

    variables                      shift and go to state 51
    empty                          shift and go to state 6

state 42

    (19) parameters -> OPARENTHESIS . parameter CPARENTHESIS
    (20) parameter -> . variableType IDENTIFIER parameterExtra
    (21) parameter -> . empty
    (16) variableType -> . NUMBER
    (17) variableType -> . WORDS
    (18) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 14
    WORDS           shift and go to state 15
    LETTER          shift and go to state 16
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    parameter                      shift and go to state 52
    variableType                   shift and go to state 53
    empty                          shift and go to state 54

state 43

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra . SEMICOLON declaration

    SEMICOLON       shift and go to state 55


state 44

    (26) expression -> expression PLUS . term
    (29) term -> . term MULTIPLICATION factor
    (30) term -> . term DIVISION factor
    (31) term -> . factor
    (32) factor -> . NUMBERVALUE
    (33) factor -> . WORDSVALUE
    (34) factor -> . LETTERVALUE
    (35) factor -> . OPARENTHESIS expression CPARENTHESIS

    NUMBERVALUE     shift and go to state 36
    WORDSVALUE      shift and go to state 37
    LETTERVALUE     shift and go to state 38
    OPARENTHESIS    shift and go to state 39

    term                           shift and go to state 56
    factor                         shift and go to state 35

state 45

    (27) expression -> expression MINUS . term
    (29) term -> . term MULTIPLICATION factor
    (30) term -> . term DIVISION factor
    (31) term -> . factor
    (32) factor -> . NUMBERVALUE
    (33) factor -> . WORDSVALUE
    (34) factor -> . LETTERVALUE
    (35) factor -> . OPARENTHESIS expression CPARENTHESIS

    NUMBERVALUE     shift and go to state 36
    WORDSVALUE      shift and go to state 37
    LETTERVALUE     shift and go to state 38
    OPARENTHESIS    shift and go to state 39

    term                           shift and go to state 57
    factor                         shift and go to state 35

state 46

    (8) declarationExtra -> COMMA . IDENTIFIER ASSIGNATION expression declarationExtra

    IDENTIFIER      shift and go to state 58


state 47

    (9) declarationExtra -> empty .

    SEMICOLON       reduce using rule 9 (declarationExtra -> empty .)


state 48

    (29) term -> term MULTIPLICATION . factor
    (32) factor -> . NUMBERVALUE
    (33) factor -> . WORDSVALUE
    (34) factor -> . LETTERVALUE
    (35) factor -> . OPARENTHESIS expression CPARENTHESIS

    NUMBERVALUE     shift and go to state 36
    WORDSVALUE      shift and go to state 37
    LETTERVALUE     shift and go to state 38
    OPARENTHESIS    shift and go to state 39

    factor                         shift and go to state 59

state 49

    (30) term -> term DIVISION . factor
    (32) factor -> . NUMBERVALUE
    (33) factor -> . WORDSVALUE
    (34) factor -> . LETTERVALUE
    (35) factor -> . OPARENTHESIS expression CPARENTHESIS

    NUMBERVALUE     shift and go to state 36
    WORDSVALUE      shift and go to state 37
    LETTERVALUE     shift and go to state 38
    OPARENTHESIS    shift and go to state 39

    factor                         shift and go to state 60

state 50

    (35) factor -> OPARENTHESIS expression . CPARENTHESIS
    (26) expression -> expression . PLUS term
    (27) expression -> expression . MINUS term

    CPARENTHESIS    shift and go to state 61
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45


state 51

    (12) block -> DEFINE blockType IDENTIFIER parameters variables . statement ENDDEFINE block
    (24) statement -> . empty
    (2) empty -> .

    ENDDEFINE       reduce using rule 2 (empty -> .)

    statement                      shift and go to state 62
    empty                          shift and go to state 31

state 52

    (19) parameters -> OPARENTHESIS parameter . CPARENTHESIS

    CPARENTHESIS    shift and go to state 63


state 53

    (20) parameter -> variableType . IDENTIFIER parameterExtra

    IDENTIFIER      shift and go to state 64


state 54

    (21) parameter -> empty .

    CPARENTHESIS    reduce using rule 21 (parameter -> empty .)


state 55

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON . declaration
    (6) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> . empty
    (16) variableType -> . NUMBER
    (17) variableType -> . WORDS
    (18) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 14
    WORDS           shift and go to state 15
    LETTER          shift and go to state 16
    ENDVARIABLES    reduce using rule 2 (empty -> .)

    variableType                   shift and go to state 12
    declaration                    shift and go to state 65
    empty                          shift and go to state 13

state 56

    (26) expression -> expression PLUS term .
    (29) term -> term . MULTIPLICATION factor
    (30) term -> term . DIVISION factor

    PLUS            reduce using rule 26 (expression -> expression PLUS term .)
    MINUS           reduce using rule 26 (expression -> expression PLUS term .)
    COMMA           reduce using rule 26 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 26 (expression -> expression PLUS term .)
    CPARENTHESIS    reduce using rule 26 (expression -> expression PLUS term .)
    MULTIPLICATION  shift and go to state 48
    DIVISION        shift and go to state 49


state 57

    (27) expression -> expression MINUS term .
    (29) term -> term . MULTIPLICATION factor
    (30) term -> term . DIVISION factor

    PLUS            reduce using rule 27 (expression -> expression MINUS term .)
    MINUS           reduce using rule 27 (expression -> expression MINUS term .)
    COMMA           reduce using rule 27 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 27 (expression -> expression MINUS term .)
    CPARENTHESIS    reduce using rule 27 (expression -> expression MINUS term .)
    MULTIPLICATION  shift and go to state 48
    DIVISION        shift and go to state 49


state 58

    (8) declarationExtra -> COMMA IDENTIFIER . ASSIGNATION expression declarationExtra

    ASSIGNATION     shift and go to state 66


state 59

    (29) term -> term MULTIPLICATION factor .

    MULTIPLICATION  reduce using rule 29 (term -> term MULTIPLICATION factor .)
    DIVISION        reduce using rule 29 (term -> term MULTIPLICATION factor .)
    PLUS            reduce using rule 29 (term -> term MULTIPLICATION factor .)
    MINUS           reduce using rule 29 (term -> term MULTIPLICATION factor .)
    COMMA           reduce using rule 29 (term -> term MULTIPLICATION factor .)
    SEMICOLON       reduce using rule 29 (term -> term MULTIPLICATION factor .)
    CPARENTHESIS    reduce using rule 29 (term -> term MULTIPLICATION factor .)


state 60

    (30) term -> term DIVISION factor .

    MULTIPLICATION  reduce using rule 30 (term -> term DIVISION factor .)
    DIVISION        reduce using rule 30 (term -> term DIVISION factor .)
    PLUS            reduce using rule 30 (term -> term DIVISION factor .)
    MINUS           reduce using rule 30 (term -> term DIVISION factor .)
    COMMA           reduce using rule 30 (term -> term DIVISION factor .)
    SEMICOLON       reduce using rule 30 (term -> term DIVISION factor .)
    CPARENTHESIS    reduce using rule 30 (term -> term DIVISION factor .)


state 61

    (35) factor -> OPARENTHESIS expression CPARENTHESIS .

    MULTIPLICATION  reduce using rule 35 (factor -> OPARENTHESIS expression CPARENTHESIS .)
    DIVISION        reduce using rule 35 (factor -> OPARENTHESIS expression CPARENTHESIS .)
    PLUS            reduce using rule 35 (factor -> OPARENTHESIS expression CPARENTHESIS .)
    MINUS           reduce using rule 35 (factor -> OPARENTHESIS expression CPARENTHESIS .)
    COMMA           reduce using rule 35 (factor -> OPARENTHESIS expression CPARENTHESIS .)
    SEMICOLON       reduce using rule 35 (factor -> OPARENTHESIS expression CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 35 (factor -> OPARENTHESIS expression CPARENTHESIS .)


state 62

    (12) block -> DEFINE blockType IDENTIFIER parameters variables statement . ENDDEFINE block

    ENDDEFINE       shift and go to state 67


state 63

    (19) parameters -> OPARENTHESIS parameter CPARENTHESIS .

    VARIABLES       reduce using rule 19 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    ENDDEFINE       reduce using rule 19 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)


state 64

    (20) parameter -> variableType IDENTIFIER . parameterExtra
    (22) parameterExtra -> . COMMA variableType IDENTIFIER parameterExtra
    (23) parameterExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 69
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    parameterExtra                 shift and go to state 68
    empty                          shift and go to state 70

state 65

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration .

    ENDVARIABLES    reduce using rule 6 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration .)


state 66

    (8) declarationExtra -> COMMA IDENTIFIER ASSIGNATION . expression declarationExtra
    (26) expression -> . expression PLUS term
    (27) expression -> . expression MINUS term
    (28) expression -> . term
    (29) term -> . term MULTIPLICATION factor
    (30) term -> . term DIVISION factor
    (31) term -> . factor
    (32) factor -> . NUMBERVALUE
    (33) factor -> . WORDSVALUE
    (34) factor -> . LETTERVALUE
    (35) factor -> . OPARENTHESIS expression CPARENTHESIS

    NUMBERVALUE     shift and go to state 36
    WORDSVALUE      shift and go to state 37
    LETTERVALUE     shift and go to state 38
    OPARENTHESIS    shift and go to state 39

    expression                     shift and go to state 71
    term                           shift and go to state 34
    factor                         shift and go to state 35

state 67

    (12) block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE . block
    (12) block -> . DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block
    (13) block -> . empty
    (2) empty -> .

    DEFINE          shift and go to state 20
    ENDBLOCKS       reduce using rule 2 (empty -> .)

    block                          shift and go to state 72
    empty                          shift and go to state 21

state 68

    (20) parameter -> variableType IDENTIFIER parameterExtra .

    CPARENTHESIS    reduce using rule 20 (parameter -> variableType IDENTIFIER parameterExtra .)


state 69

    (22) parameterExtra -> COMMA . variableType IDENTIFIER parameterExtra
    (16) variableType -> . NUMBER
    (17) variableType -> . WORDS
    (18) variableType -> . LETTER

    NUMBER          shift and go to state 14
    WORDS           shift and go to state 15
    LETTER          shift and go to state 16

    variableType                   shift and go to state 73

state 70

    (23) parameterExtra -> empty .

    CPARENTHESIS    reduce using rule 23 (parameterExtra -> empty .)


state 71

    (8) declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression . declarationExtra
    (26) expression -> expression . PLUS term
    (27) expression -> expression . MINUS term
    (8) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (9) declarationExtra -> . empty
    (2) empty -> .

    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 74
    empty                          shift and go to state 47

state 72

    (12) block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block .

    ENDBLOCKS       reduce using rule 12 (block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block .)


state 73

    (22) parameterExtra -> COMMA variableType . IDENTIFIER parameterExtra

    IDENTIFIER      shift and go to state 75


state 74

    (8) declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra .

    SEMICOLON       reduce using rule 8 (declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra .)


state 75

    (22) parameterExtra -> COMMA variableType IDENTIFIER . parameterExtra
    (22) parameterExtra -> . COMMA variableType IDENTIFIER parameterExtra
    (23) parameterExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 69
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    parameterExtra                 shift and go to state 76
    empty                          shift and go to state 70

state 76

    (22) parameterExtra -> COMMA variableType IDENTIFIER parameterExtra .

    CPARENTHESIS    reduce using rule 22 (parameterExtra -> COMMA variableType IDENTIFIER parameterExtra .)

