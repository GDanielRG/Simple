Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    DISPLAY
    NEWLINE
    FLAG
    FALSE
    NOT

Grammar

Rule 0     S' -> simple
Rule 1     simple -> PROGRAM program ENDPROGRAM
Rule 2     empty -> <empty>
Rule 3     program -> variables blocks main
Rule 4     variables -> VARIABLES declaration ENDVARIABLES
Rule 5     variables -> empty
Rule 6     declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
Rule 7     declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
Rule 8     declaration -> variableType IDENTIFIER declarationExtra SEMICOLON declaration
Rule 9     declaration -> empty
Rule 10    declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra
Rule 11    declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
Rule 12    declarationExtra -> COMMA IDENTIFIER declarationExtra
Rule 13    declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
Rule 14    declarationExtra -> empty
Rule 15    arrayIndexes -> expression arrayIndexesExtra
Rule 16    arrayIndexesExtra -> COMMA expression arrayIndexesExtra
Rule 17    arrayIndexesExtra -> empty
Rule 18    blocks -> BLOCKS block ENDBLOCKS
Rule 19    blocks -> empty
Rule 20    block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block
Rule 21    block -> empty
Rule 22    blockType -> PROCEDURE
Rule 23    blockType -> variableType
Rule 24    variableType -> NUMBER
Rule 25    variableType -> WORDS
Rule 26    variableType -> LETTER
Rule 27    parameters -> OPARENTHESIS parameter CPARENTHESIS
Rule 28    parameter -> variableType IDENTIFIER parameterExtra
Rule 29    parameter -> empty
Rule 30    parameterExtra -> COMMA variableType IDENTIFIER parameterExtra
Rule 31    parameterExtra -> empty
Rule 32    statement -> assign SEMICOLON statement
Rule 33    statement -> call SEMICOLON statement
Rule 34    statement -> return empty statement
Rule 35    statement -> ifStatement empty statement
Rule 36    statement -> whileStatement empty statement
Rule 37    statement -> empty
Rule 38    assign -> location ASSIGNATION expression
Rule 39    location -> IDENTIFIER
Rule 40    location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
Rule 41    location -> call
Rule 42    call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
Rule 43    actuals -> expression commaExpressionList
Rule 44    commaExpressionList -> commaExpression commaExpressionList
Rule 45    commaExpressionList -> empty
Rule 46    commaExpression -> COMMA expression
Rule 47    return -> RETURN returnExpression SEMICOLON
Rule 48    returnExpression -> expression
Rule 49    returnExpression -> empty
Rule 50    ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
Rule 51    elseStatement -> ELSE statement
Rule 52    elseStatement -> empty
Rule 53    whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
Rule 54    main -> START variables statement FINISH
Rule 55    expression -> location
Rule 56    expression -> binaryExpression
Rule 57    expression -> NONZEROINT
Rule 58    expression -> FLAGVALUE
Rule 59    expression -> NUMBERVALUE
Rule 60    expression -> WORDSVALUE
Rule 61    expression -> LETTERVALUE
Rule 62    expression -> OPARENTHESIS expression CPARENTHESIS
Rule 63    binaryExpression -> expression OR expression
Rule 64    binaryExpression -> expression AND expression
Rule 65    binaryExpression -> expression LESSER expression
Rule 66    binaryExpression -> expression GREATER expression
Rule 67    binaryExpression -> expression EQUALITY expression
Rule 68    binaryExpression -> expression PLUS expression
Rule 69    binaryExpression -> expression MINUS expression
Rule 70    binaryExpression -> expression MULTIPLICATION expression
Rule 71    binaryExpression -> expression DIVISION expression
Rule 72    binaryExpression -> expression MODULUS expression

Terminals, with rules where they appear

AND                  : 64
ASSIGNATION          : 6 7 10 11 38
BLOCKS               : 18
CBRACKETS            : 7 11 13 40
COMMA                : 10 11 12 13 16 30 46
CPARENTHESIS         : 27 42 50 53 62
DEFINE               : 20
DISPLAY              : 
DIVISION             : 71
ELSE                 : 51
ENDBLOCKS            : 18
ENDDEFINE            : 20
ENDIF                : 50
ENDPROGRAM           : 1
ENDVARIABLES         : 4
ENDWHILE             : 53
EQUALITY             : 67
FALSE                : 
FINISH               : 54
FLAG                 : 
FLAGVALUE            : 58
GREATER              : 66
IDENTIFIER           : 6 7 8 10 11 12 13 20 28 30 39 40 42
IF                   : 50
LESSER               : 65
LETTER               : 26
LETTERVALUE          : 61
MINUS                : 69
MODULUS              : 72
MULTIPLICATION       : 70
NEWLINE              : 
NONZEROINT           : 57
NOT                  : 
NUMBER               : 24
NUMBERVALUE          : 59
OBRACKETS            : 7 11 13 40
OPARENTHESIS         : 27 42 50 53 62
OR                   : 63
PLUS                 : 68
PROCEDURE            : 22
PROGRAM              : 1
RETURN               : 47
SEMICOLON            : 6 7 8 32 33 47
START                : 54
TRUE                 : 
VARIABLES            : 4
WHILE                : 53
WORDS                : 25
WORDSVALUE           : 60
error                : 

Nonterminals, with rules where they appear

actuals              : 42
arrayIndexes         : 7 11 13 40
arrayIndexesExtra    : 15 16
assign               : 32
binaryExpression     : 56
block                : 18 20
blockType            : 20
blocks               : 3
call                 : 33 41
commaExpression      : 44
commaExpressionList  : 43 44
declaration          : 4 6 7 8
declarationExtra     : 6 7 8 10 11 12 13
elseStatement        : 50
empty                : 5 9 14 17 19 21 29 31 34 35 36 37 45 49 52
expression           : 6 7 10 11 15 16 38 43 46 48 50 53 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72
ifStatement          : 35
location             : 38 55
main                 : 3
parameter            : 27
parameterExtra       : 28 30
parameters           : 20
program              : 1
return               : 34
returnExpression     : 47
simple               : 0
statement            : 20 32 33 34 35 36 50 51 53 54
variableType         : 6 7 8 23 28 30
variables            : 3 20 54
whileStatement       : 36

Parsing method: LALR

state 0

    (0) S' -> . simple
    (1) simple -> . PROGRAM program ENDPROGRAM

    PROGRAM         shift and go to state 2

    simple                         shift and go to state 1

state 1

    (0) S' -> simple .



state 2

    (1) simple -> PROGRAM . program ENDPROGRAM
    (3) program -> . variables blocks main
    (4) variables -> . VARIABLES declaration ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    BLOCKS          reduce using rule 2 (empty -> .)
    START           reduce using rule 2 (empty -> .)

    variables                      shift and go to state 3
    program                        shift and go to state 4
    empty                          shift and go to state 6

state 3

    (3) program -> variables . blocks main
    (18) blocks -> . BLOCKS block ENDBLOCKS
    (19) blocks -> . empty
    (2) empty -> .

    BLOCKS          shift and go to state 7
    START           reduce using rule 2 (empty -> .)

    blocks                         shift and go to state 9
    empty                          shift and go to state 8

state 4

    (1) simple -> PROGRAM program . ENDPROGRAM

    ENDPROGRAM      shift and go to state 10


state 5

    (4) variables -> VARIABLES . declaration ENDVARIABLES
    (6) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> . variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
    (8) declaration -> . variableType IDENTIFIER declarationExtra SEMICOLON declaration
    (9) declaration -> . empty
    (24) variableType -> . NUMBER
    (25) variableType -> . WORDS
    (26) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 13
    WORDS           shift and go to state 11
    LETTER          shift and go to state 14
    ENDVARIABLES    reduce using rule 2 (empty -> .)

    variableType                   shift and go to state 12
    declaration                    shift and go to state 15
    empty                          shift and go to state 16

state 6

    (5) variables -> empty .

    BLOCKS          reduce using rule 5 (variables -> empty .)
    START           reduce using rule 5 (variables -> empty .)
    IDENTIFIER      reduce using rule 5 (variables -> empty .)
    RETURN          reduce using rule 5 (variables -> empty .)
    IF              reduce using rule 5 (variables -> empty .)
    WHILE           reduce using rule 5 (variables -> empty .)
    FINISH          reduce using rule 5 (variables -> empty .)
    ENDDEFINE       reduce using rule 5 (variables -> empty .)


state 7

    (18) blocks -> BLOCKS . block ENDBLOCKS
    (20) block -> . DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block
    (21) block -> . empty
    (2) empty -> .

    DEFINE          shift and go to state 19
    ENDBLOCKS       reduce using rule 2 (empty -> .)

    block                          shift and go to state 18
    empty                          shift and go to state 17

state 8

    (19) blocks -> empty .

    START           reduce using rule 19 (blocks -> empty .)


state 9

    (3) program -> variables blocks . main
    (54) main -> . START variables statement FINISH

    START           shift and go to state 20

    main                           shift and go to state 21

state 10

    (1) simple -> PROGRAM program ENDPROGRAM .

    $end            reduce using rule 1 (simple -> PROGRAM program ENDPROGRAM .)


state 11

    (25) variableType -> WORDS .

    IDENTIFIER      reduce using rule 25 (variableType -> WORDS .)


state 12

    (6) declaration -> variableType . IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> variableType . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
    (8) declaration -> variableType . IDENTIFIER declarationExtra SEMICOLON declaration

    IDENTIFIER      shift and go to state 22


state 13

    (24) variableType -> NUMBER .

    IDENTIFIER      reduce using rule 24 (variableType -> NUMBER .)


state 14

    (26) variableType -> LETTER .

    IDENTIFIER      reduce using rule 26 (variableType -> LETTER .)


state 15

    (4) variables -> VARIABLES declaration . ENDVARIABLES

    ENDVARIABLES    shift and go to state 23


state 16

    (9) declaration -> empty .

    ENDVARIABLES    reduce using rule 9 (declaration -> empty .)


state 17

    (21) block -> empty .

    ENDBLOCKS       reduce using rule 21 (block -> empty .)


state 18

    (18) blocks -> BLOCKS block . ENDBLOCKS

    ENDBLOCKS       shift and go to state 24


state 19

    (20) block -> DEFINE . blockType IDENTIFIER parameters variables statement ENDDEFINE block
    (22) blockType -> . PROCEDURE
    (23) blockType -> . variableType
    (24) variableType -> . NUMBER
    (25) variableType -> . WORDS
    (26) variableType -> . LETTER

    PROCEDURE       shift and go to state 26
    NUMBER          shift and go to state 13
    WORDS           shift and go to state 11
    LETTER          shift and go to state 14

    variableType                   shift and go to state 25
    blockType                      shift and go to state 27

state 20

    (54) main -> START . variables statement FINISH
    (4) variables -> . VARIABLES declaration ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)

    variables                      shift and go to state 28
    empty                          shift and go to state 6

state 21

    (3) program -> variables blocks main .

    ENDPROGRAM      reduce using rule 3 (program -> variables blocks main .)


state 22

    (6) declaration -> variableType IDENTIFIER . ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> variableType IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
    (8) declaration -> variableType IDENTIFIER . declarationExtra SEMICOLON declaration
    (10) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (14) declarationExtra -> . empty
    (2) empty -> .

    ASSIGNATION     shift and go to state 29
    OBRACKETS       shift and go to state 30
    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 32
    empty                          shift and go to state 33

state 23

    (4) variables -> VARIABLES declaration ENDVARIABLES .

    BLOCKS          reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    START           reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    IDENTIFIER      reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    RETURN          reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    IF              reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    WHILE           reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    FINISH          reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)
    ENDDEFINE       reduce using rule 4 (variables -> VARIABLES declaration ENDVARIABLES .)


state 24

    (18) blocks -> BLOCKS block ENDBLOCKS .

    START           reduce using rule 18 (blocks -> BLOCKS block ENDBLOCKS .)


state 25

    (23) blockType -> variableType .

    IDENTIFIER      reduce using rule 23 (blockType -> variableType .)


state 26

    (22) blockType -> PROCEDURE .

    IDENTIFIER      reduce using rule 22 (blockType -> PROCEDURE .)


state 27

    (20) block -> DEFINE blockType . IDENTIFIER parameters variables statement ENDDEFINE block

    IDENTIFIER      shift and go to state 34


state 28

    (54) main -> START variables . statement FINISH
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    FINISH          reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 39
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 29

    (6) declaration -> variableType IDENTIFIER ASSIGNATION . expression declarationExtra SEMICOLON declaration
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 57

state 30

    (7) declaration -> variableType IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
    (15) arrayIndexes -> . expression arrayIndexesExtra
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    arrayIndexes                   shift and go to state 58
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 59

state 31

    (10) declarationExtra -> COMMA . IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> COMMA . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> COMMA . IDENTIFIER declarationExtra
    (13) declarationExtra -> COMMA . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra

    IDENTIFIER      shift and go to state 60


state 32

    (8) declaration -> variableType IDENTIFIER declarationExtra . SEMICOLON declaration

    SEMICOLON       shift and go to state 61


state 33

    (14) declarationExtra -> empty .

    SEMICOLON       reduce using rule 14 (declarationExtra -> empty .)


state 34

    (20) block -> DEFINE blockType IDENTIFIER . parameters variables statement ENDDEFINE block
    (27) parameters -> . OPARENTHESIS parameter CPARENTHESIS

    OPARENTHESIS    shift and go to state 63

    parameters                     shift and go to state 62

state 35

    (47) return -> RETURN . returnExpression SEMICOLON
    (48) returnExpression -> . expression
    (49) returnExpression -> . empty
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    SEMICOLON       reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 54

    returnExpression               shift and go to state 64
    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 66
    empty                          shift and go to state 65

state 36

    (53) whileStatement -> WHILE . OPARENTHESIS expression CPARENTHESIS statement ENDWHILE

    OPARENTHESIS    shift and go to state 67


state 37

    (33) statement -> call . SEMICOLON statement
    (41) location -> call .

    SEMICOLON       shift and go to state 68
    ASSIGNATION     reduce using rule 41 (location -> call .)


state 38

    (38) assign -> location . ASSIGNATION expression

    ASSIGNATION     shift and go to state 69


state 39

    (54) main -> START variables statement . FINISH

    FINISH          shift and go to state 70


state 40

    (42) call -> IDENTIFIER . OPARENTHESIS actuals CPARENTHESIS
    (39) location -> IDENTIFIER .
    (40) location -> IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS

    OPARENTHESIS    shift and go to state 72
    ASSIGNATION     reduce using rule 39 (location -> IDENTIFIER .)
    OBRACKETS       shift and go to state 71


state 41

    (37) statement -> empty .

    FINISH          reduce using rule 37 (statement -> empty .)
    ENDDEFINE       reduce using rule 37 (statement -> empty .)
    ENDWHILE        reduce using rule 37 (statement -> empty .)
    ELSE            reduce using rule 37 (statement -> empty .)
    ENDIF           reduce using rule 37 (statement -> empty .)


state 42

    (34) statement -> return . empty statement
    (2) empty -> .

    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 73

state 43

    (35) statement -> ifStatement . empty statement
    (2) empty -> .

    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 74

state 44

    (36) statement -> whileStatement . empty statement
    (2) empty -> .

    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 75

state 45

    (50) ifStatement -> IF . OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF

    OPARENTHESIS    shift and go to state 76


state 46

    (32) statement -> assign . SEMICOLON statement

    SEMICOLON       shift and go to state 77


state 47

    (59) expression -> NUMBERVALUE .

    OR              reduce using rule 59 (expression -> NUMBERVALUE .)
    AND             reduce using rule 59 (expression -> NUMBERVALUE .)
    LESSER          reduce using rule 59 (expression -> NUMBERVALUE .)
    GREATER         reduce using rule 59 (expression -> NUMBERVALUE .)
    EQUALITY        reduce using rule 59 (expression -> NUMBERVALUE .)
    PLUS            reduce using rule 59 (expression -> NUMBERVALUE .)
    MINUS           reduce using rule 59 (expression -> NUMBERVALUE .)
    MULTIPLICATION  reduce using rule 59 (expression -> NUMBERVALUE .)
    DIVISION        reduce using rule 59 (expression -> NUMBERVALUE .)
    MODULUS         reduce using rule 59 (expression -> NUMBERVALUE .)
    COMMA           reduce using rule 59 (expression -> NUMBERVALUE .)
    CBRACKETS       reduce using rule 59 (expression -> NUMBERVALUE .)
    SEMICOLON       reduce using rule 59 (expression -> NUMBERVALUE .)
    CPARENTHESIS    reduce using rule 59 (expression -> NUMBERVALUE .)


state 48

    (58) expression -> FLAGVALUE .

    OR              reduce using rule 58 (expression -> FLAGVALUE .)
    AND             reduce using rule 58 (expression -> FLAGVALUE .)
    LESSER          reduce using rule 58 (expression -> FLAGVALUE .)
    GREATER         reduce using rule 58 (expression -> FLAGVALUE .)
    EQUALITY        reduce using rule 58 (expression -> FLAGVALUE .)
    PLUS            reduce using rule 58 (expression -> FLAGVALUE .)
    MINUS           reduce using rule 58 (expression -> FLAGVALUE .)
    MULTIPLICATION  reduce using rule 58 (expression -> FLAGVALUE .)
    DIVISION        reduce using rule 58 (expression -> FLAGVALUE .)
    MODULUS         reduce using rule 58 (expression -> FLAGVALUE .)
    COMMA           reduce using rule 58 (expression -> FLAGVALUE .)
    CBRACKETS       reduce using rule 58 (expression -> FLAGVALUE .)
    SEMICOLON       reduce using rule 58 (expression -> FLAGVALUE .)
    CPARENTHESIS    reduce using rule 58 (expression -> FLAGVALUE .)


state 49

    (60) expression -> WORDSVALUE .

    OR              reduce using rule 60 (expression -> WORDSVALUE .)
    AND             reduce using rule 60 (expression -> WORDSVALUE .)
    LESSER          reduce using rule 60 (expression -> WORDSVALUE .)
    GREATER         reduce using rule 60 (expression -> WORDSVALUE .)
    EQUALITY        reduce using rule 60 (expression -> WORDSVALUE .)
    PLUS            reduce using rule 60 (expression -> WORDSVALUE .)
    MINUS           reduce using rule 60 (expression -> WORDSVALUE .)
    MULTIPLICATION  reduce using rule 60 (expression -> WORDSVALUE .)
    DIVISION        reduce using rule 60 (expression -> WORDSVALUE .)
    MODULUS         reduce using rule 60 (expression -> WORDSVALUE .)
    COMMA           reduce using rule 60 (expression -> WORDSVALUE .)
    CBRACKETS       reduce using rule 60 (expression -> WORDSVALUE .)
    SEMICOLON       reduce using rule 60 (expression -> WORDSVALUE .)
    CPARENTHESIS    reduce using rule 60 (expression -> WORDSVALUE .)


state 50

    (62) expression -> OPARENTHESIS . expression CPARENTHESIS
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 78

state 51

    (61) expression -> LETTERVALUE .

    OR              reduce using rule 61 (expression -> LETTERVALUE .)
    AND             reduce using rule 61 (expression -> LETTERVALUE .)
    LESSER          reduce using rule 61 (expression -> LETTERVALUE .)
    GREATER         reduce using rule 61 (expression -> LETTERVALUE .)
    EQUALITY        reduce using rule 61 (expression -> LETTERVALUE .)
    PLUS            reduce using rule 61 (expression -> LETTERVALUE .)
    MINUS           reduce using rule 61 (expression -> LETTERVALUE .)
    MULTIPLICATION  reduce using rule 61 (expression -> LETTERVALUE .)
    DIVISION        reduce using rule 61 (expression -> LETTERVALUE .)
    MODULUS         reduce using rule 61 (expression -> LETTERVALUE .)
    COMMA           reduce using rule 61 (expression -> LETTERVALUE .)
    CBRACKETS       reduce using rule 61 (expression -> LETTERVALUE .)
    SEMICOLON       reduce using rule 61 (expression -> LETTERVALUE .)
    CPARENTHESIS    reduce using rule 61 (expression -> LETTERVALUE .)


state 52

    (41) location -> call .

    OR              reduce using rule 41 (location -> call .)
    AND             reduce using rule 41 (location -> call .)
    LESSER          reduce using rule 41 (location -> call .)
    GREATER         reduce using rule 41 (location -> call .)
    EQUALITY        reduce using rule 41 (location -> call .)
    PLUS            reduce using rule 41 (location -> call .)
    MINUS           reduce using rule 41 (location -> call .)
    MULTIPLICATION  reduce using rule 41 (location -> call .)
    DIVISION        reduce using rule 41 (location -> call .)
    MODULUS         reduce using rule 41 (location -> call .)
    COMMA           reduce using rule 41 (location -> call .)
    SEMICOLON       reduce using rule 41 (location -> call .)
    CBRACKETS       reduce using rule 41 (location -> call .)
    CPARENTHESIS    reduce using rule 41 (location -> call .)


state 53

    (56) expression -> binaryExpression .

    OR              reduce using rule 56 (expression -> binaryExpression .)
    AND             reduce using rule 56 (expression -> binaryExpression .)
    LESSER          reduce using rule 56 (expression -> binaryExpression .)
    GREATER         reduce using rule 56 (expression -> binaryExpression .)
    EQUALITY        reduce using rule 56 (expression -> binaryExpression .)
    PLUS            reduce using rule 56 (expression -> binaryExpression .)
    MINUS           reduce using rule 56 (expression -> binaryExpression .)
    MULTIPLICATION  reduce using rule 56 (expression -> binaryExpression .)
    DIVISION        reduce using rule 56 (expression -> binaryExpression .)
    MODULUS         reduce using rule 56 (expression -> binaryExpression .)
    COMMA           reduce using rule 56 (expression -> binaryExpression .)
    CBRACKETS       reduce using rule 56 (expression -> binaryExpression .)
    SEMICOLON       reduce using rule 56 (expression -> binaryExpression .)
    CPARENTHESIS    reduce using rule 56 (expression -> binaryExpression .)


state 54

    (39) location -> IDENTIFIER .
    (40) location -> IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS
    (42) call -> IDENTIFIER . OPARENTHESIS actuals CPARENTHESIS

    OR              reduce using rule 39 (location -> IDENTIFIER .)
    AND             reduce using rule 39 (location -> IDENTIFIER .)
    LESSER          reduce using rule 39 (location -> IDENTIFIER .)
    GREATER         reduce using rule 39 (location -> IDENTIFIER .)
    EQUALITY        reduce using rule 39 (location -> IDENTIFIER .)
    PLUS            reduce using rule 39 (location -> IDENTIFIER .)
    MINUS           reduce using rule 39 (location -> IDENTIFIER .)
    MULTIPLICATION  reduce using rule 39 (location -> IDENTIFIER .)
    DIVISION        reduce using rule 39 (location -> IDENTIFIER .)
    MODULUS         reduce using rule 39 (location -> IDENTIFIER .)
    COMMA           reduce using rule 39 (location -> IDENTIFIER .)
    SEMICOLON       reduce using rule 39 (location -> IDENTIFIER .)
    CBRACKETS       reduce using rule 39 (location -> IDENTIFIER .)
    CPARENTHESIS    reduce using rule 39 (location -> IDENTIFIER .)
    OBRACKETS       shift and go to state 71
    OPARENTHESIS    shift and go to state 72


state 55

    (55) expression -> location .

    OR              reduce using rule 55 (expression -> location .)
    AND             reduce using rule 55 (expression -> location .)
    LESSER          reduce using rule 55 (expression -> location .)
    GREATER         reduce using rule 55 (expression -> location .)
    EQUALITY        reduce using rule 55 (expression -> location .)
    PLUS            reduce using rule 55 (expression -> location .)
    MINUS           reduce using rule 55 (expression -> location .)
    MULTIPLICATION  reduce using rule 55 (expression -> location .)
    DIVISION        reduce using rule 55 (expression -> location .)
    MODULUS         reduce using rule 55 (expression -> location .)
    COMMA           reduce using rule 55 (expression -> location .)
    CBRACKETS       reduce using rule 55 (expression -> location .)
    SEMICOLON       reduce using rule 55 (expression -> location .)
    CPARENTHESIS    reduce using rule 55 (expression -> location .)


state 56

    (57) expression -> NONZEROINT .

    OR              reduce using rule 57 (expression -> NONZEROINT .)
    AND             reduce using rule 57 (expression -> NONZEROINT .)
    LESSER          reduce using rule 57 (expression -> NONZEROINT .)
    GREATER         reduce using rule 57 (expression -> NONZEROINT .)
    EQUALITY        reduce using rule 57 (expression -> NONZEROINT .)
    PLUS            reduce using rule 57 (expression -> NONZEROINT .)
    MINUS           reduce using rule 57 (expression -> NONZEROINT .)
    MULTIPLICATION  reduce using rule 57 (expression -> NONZEROINT .)
    DIVISION        reduce using rule 57 (expression -> NONZEROINT .)
    MODULUS         reduce using rule 57 (expression -> NONZEROINT .)
    COMMA           reduce using rule 57 (expression -> NONZEROINT .)
    CBRACKETS       reduce using rule 57 (expression -> NONZEROINT .)
    SEMICOLON       reduce using rule 57 (expression -> NONZEROINT .)
    CPARENTHESIS    reduce using rule 57 (expression -> NONZEROINT .)


state 57

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression . declarationExtra SEMICOLON declaration
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression
    (10) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (14) declarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85
    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 84
    empty                          shift and go to state 33

state 58

    (7) declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration

    CBRACKETS       shift and go to state 90


state 59

    (15) arrayIndexes -> expression . arrayIndexesExtra
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression
    (16) arrayIndexesExtra -> . COMMA expression arrayIndexesExtra
    (17) arrayIndexesExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85
    COMMA           shift and go to state 92
    CBRACKETS       reduce using rule 2 (empty -> .)

    arrayIndexesExtra              shift and go to state 91
    empty                          shift and go to state 93

state 60

    (10) declarationExtra -> COMMA IDENTIFIER . ASSIGNATION expression declarationExtra
    (11) declarationExtra -> COMMA IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> COMMA IDENTIFIER . declarationExtra
    (13) declarationExtra -> COMMA IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (10) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (14) declarationExtra -> . empty
    (2) empty -> .

    ASSIGNATION     shift and go to state 94
    OBRACKETS       shift and go to state 95
    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 33
    declarationExtra               shift and go to state 96

state 61

    (8) declaration -> variableType IDENTIFIER declarationExtra SEMICOLON . declaration
    (6) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> . variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
    (8) declaration -> . variableType IDENTIFIER declarationExtra SEMICOLON declaration
    (9) declaration -> . empty
    (24) variableType -> . NUMBER
    (25) variableType -> . WORDS
    (26) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 13
    WORDS           shift and go to state 11
    LETTER          shift and go to state 14
    ENDVARIABLES    reduce using rule 2 (empty -> .)

    variableType                   shift and go to state 12
    declaration                    shift and go to state 97
    empty                          shift and go to state 16

state 62

    (20) block -> DEFINE blockType IDENTIFIER parameters . variables statement ENDDEFINE block
    (4) variables -> . VARIABLES declaration ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)

    variables                      shift and go to state 98
    empty                          shift and go to state 6

state 63

    (27) parameters -> OPARENTHESIS . parameter CPARENTHESIS
    (28) parameter -> . variableType IDENTIFIER parameterExtra
    (29) parameter -> . empty
    (24) variableType -> . NUMBER
    (25) variableType -> . WORDS
    (26) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 13
    WORDS           shift and go to state 11
    LETTER          shift and go to state 14
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    variableType                   shift and go to state 99
    parameter                      shift and go to state 100
    empty                          shift and go to state 101

state 64

    (47) return -> RETURN returnExpression . SEMICOLON

    SEMICOLON       shift and go to state 102


state 65

    (49) returnExpression -> empty .

    SEMICOLON       reduce using rule 49 (returnExpression -> empty .)


state 66

    (48) returnExpression -> expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    SEMICOLON       reduce using rule 48 (returnExpression -> expression .)
    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85


state 67

    (53) whileStatement -> WHILE OPARENTHESIS . expression CPARENTHESIS statement ENDWHILE
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 103

state 68

    (33) statement -> call SEMICOLON . statement
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 104
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 69

    (38) assign -> location ASSIGNATION . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 105

state 70

    (54) main -> START variables statement FINISH .

    ENDPROGRAM      reduce using rule 54 (main -> START variables statement FINISH .)


state 71

    (40) location -> IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS
    (15) arrayIndexes -> . expression arrayIndexesExtra
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    arrayIndexes                   shift and go to state 106
    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 59

state 72

    (42) call -> IDENTIFIER OPARENTHESIS . actuals CPARENTHESIS
    (43) actuals -> . expression commaExpressionList
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    actuals                        shift and go to state 107
    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 108

state 73

    (34) statement -> return empty . statement
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 109
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 74

    (35) statement -> ifStatement empty . statement
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 110
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 75

    (36) statement -> whileStatement empty . statement
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 111
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 76

    (50) ifStatement -> IF OPARENTHESIS . expression CPARENTHESIS statement elseStatement ENDIF
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 112

state 77

    (32) statement -> assign SEMICOLON . statement
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 113
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 78

    (62) expression -> OPARENTHESIS expression . CPARENTHESIS
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    CPARENTHESIS    shift and go to state 114
    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85


state 79

    (70) binaryExpression -> expression MULTIPLICATION . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 115

state 80

    (69) binaryExpression -> expression MINUS . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 116

state 81

    (67) binaryExpression -> expression EQUALITY . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 117

state 82

    (68) binaryExpression -> expression PLUS . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 118

state 83

    (71) binaryExpression -> expression DIVISION . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 119

state 84

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra . SEMICOLON declaration

    SEMICOLON       shift and go to state 120


state 85

    (72) binaryExpression -> expression MODULUS . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 121

state 86

    (64) binaryExpression -> expression AND . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 122

state 87

    (66) binaryExpression -> expression GREATER . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 123

state 88

    (65) binaryExpression -> expression LESSER . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 124

state 89

    (63) binaryExpression -> expression OR . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 125

state 90

    (7) declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS . ASSIGNATION expression declarationExtra SEMICOLON declaration

    ASSIGNATION     shift and go to state 126


state 91

    (15) arrayIndexes -> expression arrayIndexesExtra .

    CBRACKETS       reduce using rule 15 (arrayIndexes -> expression arrayIndexesExtra .)


state 92

    (16) arrayIndexesExtra -> COMMA . expression arrayIndexesExtra
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    call                           shift and go to state 52
    expression                     shift and go to state 127

state 93

    (17) arrayIndexesExtra -> empty .

    CBRACKETS       reduce using rule 17 (arrayIndexesExtra -> empty .)


state 94

    (10) declarationExtra -> COMMA IDENTIFIER ASSIGNATION . expression declarationExtra
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 128

state 95

    (11) declarationExtra -> COMMA IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (13) declarationExtra -> COMMA IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS declarationExtra
    (15) arrayIndexes -> . expression arrayIndexesExtra
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    arrayIndexes                   shift and go to state 129
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 59

state 96

    (12) declarationExtra -> COMMA IDENTIFIER declarationExtra .

    SEMICOLON       reduce using rule 12 (declarationExtra -> COMMA IDENTIFIER declarationExtra .)


state 97

    (8) declaration -> variableType IDENTIFIER declarationExtra SEMICOLON declaration .

    ENDVARIABLES    reduce using rule 8 (declaration -> variableType IDENTIFIER declarationExtra SEMICOLON declaration .)


state 98

    (20) block -> DEFINE blockType IDENTIFIER parameters variables . statement ENDDEFINE block
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    ENDDEFINE       reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    location                       shift and go to state 38
    call                           shift and go to state 37
    empty                          shift and go to state 41
    statement                      shift and go to state 130
    assign                         shift and go to state 46
    ifStatement                    shift and go to state 43

state 99

    (28) parameter -> variableType . IDENTIFIER parameterExtra

    IDENTIFIER      shift and go to state 131


state 100

    (27) parameters -> OPARENTHESIS parameter . CPARENTHESIS

    CPARENTHESIS    shift and go to state 132


state 101

    (29) parameter -> empty .

    CPARENTHESIS    reduce using rule 29 (parameter -> empty .)


state 102

    (47) return -> RETURN returnExpression SEMICOLON .

    IDENTIFIER      reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    RETURN          reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    IF              reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    WHILE           reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    ENDIF           reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    FINISH          reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    ENDDEFINE       reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    ENDWHILE        reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)
    ELSE            reduce using rule 47 (return -> RETURN returnExpression SEMICOLON .)


state 103

    (53) whileStatement -> WHILE OPARENTHESIS expression . CPARENTHESIS statement ENDWHILE
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    CPARENTHESIS    shift and go to state 133
    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85


state 104

    (33) statement -> call SEMICOLON statement .

    FINISH          reduce using rule 33 (statement -> call SEMICOLON statement .)
    ENDDEFINE       reduce using rule 33 (statement -> call SEMICOLON statement .)
    ENDWHILE        reduce using rule 33 (statement -> call SEMICOLON statement .)
    ELSE            reduce using rule 33 (statement -> call SEMICOLON statement .)
    ENDIF           reduce using rule 33 (statement -> call SEMICOLON statement .)


state 105

    (38) assign -> location ASSIGNATION expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    SEMICOLON       reduce using rule 38 (assign -> location ASSIGNATION expression .)
    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85


state 106

    (40) location -> IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS

    CBRACKETS       shift and go to state 134


state 107

    (42) call -> IDENTIFIER OPARENTHESIS actuals . CPARENTHESIS

    CPARENTHESIS    shift and go to state 135


state 108

    (43) actuals -> expression . commaExpressionList
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression
    (44) commaExpressionList -> . commaExpression commaExpressionList
    (45) commaExpressionList -> . empty
    (46) commaExpression -> . COMMA expression
    (2) empty -> .

    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85
    COMMA           shift and go to state 138
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    commaExpressionList            shift and go to state 136
    commaExpression                shift and go to state 137
    empty                          shift and go to state 139

state 109

    (34) statement -> return empty statement .

    FINISH          reduce using rule 34 (statement -> return empty statement .)
    ENDDEFINE       reduce using rule 34 (statement -> return empty statement .)
    ENDWHILE        reduce using rule 34 (statement -> return empty statement .)
    ELSE            reduce using rule 34 (statement -> return empty statement .)
    ENDIF           reduce using rule 34 (statement -> return empty statement .)


state 110

    (35) statement -> ifStatement empty statement .

    FINISH          reduce using rule 35 (statement -> ifStatement empty statement .)
    ENDDEFINE       reduce using rule 35 (statement -> ifStatement empty statement .)
    ENDWHILE        reduce using rule 35 (statement -> ifStatement empty statement .)
    ELSE            reduce using rule 35 (statement -> ifStatement empty statement .)
    ENDIF           reduce using rule 35 (statement -> ifStatement empty statement .)


state 111

    (36) statement -> whileStatement empty statement .

    FINISH          reduce using rule 36 (statement -> whileStatement empty statement .)
    ENDDEFINE       reduce using rule 36 (statement -> whileStatement empty statement .)
    ENDWHILE        reduce using rule 36 (statement -> whileStatement empty statement .)
    ELSE            reduce using rule 36 (statement -> whileStatement empty statement .)
    ENDIF           reduce using rule 36 (statement -> whileStatement empty statement .)


state 112

    (50) ifStatement -> IF OPARENTHESIS expression . CPARENTHESIS statement elseStatement ENDIF
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    CPARENTHESIS    shift and go to state 140
    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85


state 113

    (32) statement -> assign SEMICOLON statement .

    FINISH          reduce using rule 32 (statement -> assign SEMICOLON statement .)
    ENDDEFINE       reduce using rule 32 (statement -> assign SEMICOLON statement .)
    ENDWHILE        reduce using rule 32 (statement -> assign SEMICOLON statement .)
    ELSE            reduce using rule 32 (statement -> assign SEMICOLON statement .)
    ENDIF           reduce using rule 32 (statement -> assign SEMICOLON statement .)


state 114

    (62) expression -> OPARENTHESIS expression CPARENTHESIS .

    OR              reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    AND             reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    LESSER          reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    GREATER         reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    EQUALITY        reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    PLUS            reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    MINUS           reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    MULTIPLICATION  reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    DIVISION        reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    MODULUS         reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    COMMA           reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    CBRACKETS       reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    SEMICOLON       reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 62 (expression -> OPARENTHESIS expression CPARENTHESIS .)


state 115

    (70) binaryExpression -> expression MULTIPLICATION expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    AND             reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    LESSER          reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    GREATER         reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    EQUALITY        reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    PLUS            reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    MINUS           reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    MULTIPLICATION  reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    DIVISION        reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    MODULUS         reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    COMMA           reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    SEMICOLON       reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    CBRACKETS       reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)
    CPARENTHESIS    reduce using rule 70 (binaryExpression -> expression MULTIPLICATION expression .)

  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! LESSER          [ shift and go to state 88 ]
  ! GREATER         [ shift and go to state 87 ]
  ! EQUALITY        [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 80 ]
  ! MULTIPLICATION  [ shift and go to state 79 ]
  ! DIVISION        [ shift and go to state 83 ]
  ! MODULUS         [ shift and go to state 85 ]


state 116

    (69) binaryExpression -> expression MINUS expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    AND             reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    LESSER          reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    GREATER         reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    EQUALITY        reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    PLUS            reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    MINUS           reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    COMMA           reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    CBRACKETS       reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    CPARENTHESIS    reduce using rule 69 (binaryExpression -> expression MINUS expression .)
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85

  ! MULTIPLICATION  [ reduce using rule 69 (binaryExpression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 69 (binaryExpression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 69 (binaryExpression -> expression MINUS expression .) ]
  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! LESSER          [ shift and go to state 88 ]
  ! GREATER         [ shift and go to state 87 ]
  ! EQUALITY        [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 80 ]


state 117

    (67) binaryExpression -> expression EQUALITY expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 67 (binaryExpression -> expression EQUALITY expression .)
    AND             reduce using rule 67 (binaryExpression -> expression EQUALITY expression .)
    EQUALITY        reduce using rule 67 (binaryExpression -> expression EQUALITY expression .)
    COMMA           reduce using rule 67 (binaryExpression -> expression EQUALITY expression .)
    SEMICOLON       reduce using rule 67 (binaryExpression -> expression EQUALITY expression .)
    CBRACKETS       reduce using rule 67 (binaryExpression -> expression EQUALITY expression .)
    CPARENTHESIS    reduce using rule 67 (binaryExpression -> expression EQUALITY expression .)
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85

  ! LESSER          [ reduce using rule 67 (binaryExpression -> expression EQUALITY expression .) ]
  ! GREATER         [ reduce using rule 67 (binaryExpression -> expression EQUALITY expression .) ]
  ! PLUS            [ reduce using rule 67 (binaryExpression -> expression EQUALITY expression .) ]
  ! MINUS           [ reduce using rule 67 (binaryExpression -> expression EQUALITY expression .) ]
  ! MULTIPLICATION  [ reduce using rule 67 (binaryExpression -> expression EQUALITY expression .) ]
  ! DIVISION        [ reduce using rule 67 (binaryExpression -> expression EQUALITY expression .) ]
  ! MODULUS         [ reduce using rule 67 (binaryExpression -> expression EQUALITY expression .) ]
  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! EQUALITY        [ shift and go to state 81 ]


state 118

    (68) binaryExpression -> expression PLUS expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    AND             reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    LESSER          reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    GREATER         reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    EQUALITY        reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    PLUS            reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    MINUS           reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    COMMA           reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    CBRACKETS       reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    CPARENTHESIS    reduce using rule 68 (binaryExpression -> expression PLUS expression .)
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85

  ! MULTIPLICATION  [ reduce using rule 68 (binaryExpression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 68 (binaryExpression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 68 (binaryExpression -> expression PLUS expression .) ]
  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! LESSER          [ shift and go to state 88 ]
  ! GREATER         [ shift and go to state 87 ]
  ! EQUALITY        [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 80 ]


state 119

    (71) binaryExpression -> expression DIVISION expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    AND             reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    LESSER          reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    GREATER         reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    EQUALITY        reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    PLUS            reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    MINUS           reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    MULTIPLICATION  reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    DIVISION        reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    MODULUS         reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    COMMA           reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    SEMICOLON       reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    CBRACKETS       reduce using rule 71 (binaryExpression -> expression DIVISION expression .)
    CPARENTHESIS    reduce using rule 71 (binaryExpression -> expression DIVISION expression .)

  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! LESSER          [ shift and go to state 88 ]
  ! GREATER         [ shift and go to state 87 ]
  ! EQUALITY        [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 80 ]
  ! MULTIPLICATION  [ shift and go to state 79 ]
  ! DIVISION        [ shift and go to state 83 ]
  ! MODULUS         [ shift and go to state 85 ]


state 120

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON . declaration
    (6) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> . variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
    (8) declaration -> . variableType IDENTIFIER declarationExtra SEMICOLON declaration
    (9) declaration -> . empty
    (24) variableType -> . NUMBER
    (25) variableType -> . WORDS
    (26) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 13
    WORDS           shift and go to state 11
    LETTER          shift and go to state 14
    ENDVARIABLES    reduce using rule 2 (empty -> .)

    variableType                   shift and go to state 12
    declaration                    shift and go to state 141
    empty                          shift and go to state 16

state 121

    (72) binaryExpression -> expression MODULUS expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    AND             reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    LESSER          reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    GREATER         reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    EQUALITY        reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    PLUS            reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    MINUS           reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    MULTIPLICATION  reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    DIVISION        reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    MODULUS         reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    COMMA           reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    CBRACKETS       reduce using rule 72 (binaryExpression -> expression MODULUS expression .)
    CPARENTHESIS    reduce using rule 72 (binaryExpression -> expression MODULUS expression .)

  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! LESSER          [ shift and go to state 88 ]
  ! GREATER         [ shift and go to state 87 ]
  ! EQUALITY        [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 80 ]
  ! MULTIPLICATION  [ shift and go to state 79 ]
  ! DIVISION        [ shift and go to state 83 ]
  ! MODULUS         [ shift and go to state 85 ]


state 122

    (64) binaryExpression -> expression AND expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 64 (binaryExpression -> expression AND expression .)
    AND             reduce using rule 64 (binaryExpression -> expression AND expression .)
    COMMA           reduce using rule 64 (binaryExpression -> expression AND expression .)
    SEMICOLON       reduce using rule 64 (binaryExpression -> expression AND expression .)
    CBRACKETS       reduce using rule 64 (binaryExpression -> expression AND expression .)
    CPARENTHESIS    reduce using rule 64 (binaryExpression -> expression AND expression .)
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85

  ! LESSER          [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! EQUALITY        [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! MULTIPLICATION  [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! DIVISION        [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 64 (binaryExpression -> expression AND expression .) ]
  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]


state 123

    (66) binaryExpression -> expression GREATER expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    AND             reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    LESSER          reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    GREATER         reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    EQUALITY        reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    COMMA           reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    CBRACKETS       reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    CPARENTHESIS    reduce using rule 66 (binaryExpression -> expression GREATER expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85

  ! PLUS            [ reduce using rule 66 (binaryExpression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 66 (binaryExpression -> expression GREATER expression .) ]
  ! MULTIPLICATION  [ reduce using rule 66 (binaryExpression -> expression GREATER expression .) ]
  ! DIVISION        [ reduce using rule 66 (binaryExpression -> expression GREATER expression .) ]
  ! MODULUS         [ reduce using rule 66 (binaryExpression -> expression GREATER expression .) ]
  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! LESSER          [ shift and go to state 88 ]
  ! GREATER         [ shift and go to state 87 ]
  ! EQUALITY        [ shift and go to state 81 ]


state 124

    (65) binaryExpression -> expression LESSER expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    AND             reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    LESSER          reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    GREATER         reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    EQUALITY        reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    COMMA           reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    SEMICOLON       reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    CBRACKETS       reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    CPARENTHESIS    reduce using rule 65 (binaryExpression -> expression LESSER expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85

  ! PLUS            [ reduce using rule 65 (binaryExpression -> expression LESSER expression .) ]
  ! MINUS           [ reduce using rule 65 (binaryExpression -> expression LESSER expression .) ]
  ! MULTIPLICATION  [ reduce using rule 65 (binaryExpression -> expression LESSER expression .) ]
  ! DIVISION        [ reduce using rule 65 (binaryExpression -> expression LESSER expression .) ]
  ! MODULUS         [ reduce using rule 65 (binaryExpression -> expression LESSER expression .) ]
  ! OR              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 86 ]
  ! LESSER          [ shift and go to state 88 ]
  ! GREATER         [ shift and go to state 87 ]
  ! EQUALITY        [ shift and go to state 81 ]


state 125

    (63) binaryExpression -> expression OR expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 63 (binaryExpression -> expression OR expression .)
    COMMA           reduce using rule 63 (binaryExpression -> expression OR expression .)
    SEMICOLON       reduce using rule 63 (binaryExpression -> expression OR expression .)
    CBRACKETS       reduce using rule 63 (binaryExpression -> expression OR expression .)
    CPARENTHESIS    reduce using rule 63 (binaryExpression -> expression OR expression .)
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85

  ! AND             [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! LESSER          [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! EQUALITY        [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! MULTIPLICATION  [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! DIVISION        [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 63 (binaryExpression -> expression OR expression .) ]
  ! OR              [ shift and go to state 89 ]


state 126

    (7) declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION . expression declarationExtra SEMICOLON declaration
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 142

state 127

    (16) arrayIndexesExtra -> COMMA expression . arrayIndexesExtra
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression
    (16) arrayIndexesExtra -> . COMMA expression arrayIndexesExtra
    (17) arrayIndexesExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85
    COMMA           shift and go to state 92
    CBRACKETS       reduce using rule 2 (empty -> .)

    arrayIndexesExtra              shift and go to state 143
    empty                          shift and go to state 93

state 128

    (10) declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression . declarationExtra
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression
    (10) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (14) declarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85
    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 33
    declarationExtra               shift and go to state 144

state 129

    (11) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS ASSIGNATION expression declarationExtra
    (13) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS declarationExtra

    CBRACKETS       shift and go to state 145


state 130

    (20) block -> DEFINE blockType IDENTIFIER parameters variables statement . ENDDEFINE block

    ENDDEFINE       shift and go to state 146


state 131

    (28) parameter -> variableType IDENTIFIER . parameterExtra
    (30) parameterExtra -> . COMMA variableType IDENTIFIER parameterExtra
    (31) parameterExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 147
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    empty                          shift and go to state 148
    parameterExtra                 shift and go to state 149

state 132

    (27) parameters -> OPARENTHESIS parameter CPARENTHESIS .

    VARIABLES       reduce using rule 27 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    IDENTIFIER      reduce using rule 27 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    RETURN          reduce using rule 27 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    IF              reduce using rule 27 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    WHILE           reduce using rule 27 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    ENDDEFINE       reduce using rule 27 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)


state 133

    (53) whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS . statement ENDWHILE
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    ENDWHILE        reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 150
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 134

    (40) location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .

    ASSIGNATION     reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    OR              reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    AND             reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    LESSER          reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    GREATER         reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    EQUALITY        reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    PLUS            reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    MINUS           reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    MULTIPLICATION  reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    DIVISION        reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    MODULUS         reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    COMMA           reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    SEMICOLON       reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    CBRACKETS       reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    CPARENTHESIS    reduce using rule 40 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)


state 135

    (42) call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .

    OR              reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    AND             reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    LESSER          reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    GREATER         reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    EQUALITY        reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    PLUS            reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    MINUS           reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    MULTIPLICATION  reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    DIVISION        reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    MODULUS         reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    COMMA           reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    SEMICOLON       reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    CBRACKETS       reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    ASSIGNATION     reduce using rule 42 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)


state 136

    (43) actuals -> expression commaExpressionList .

    CPARENTHESIS    reduce using rule 43 (actuals -> expression commaExpressionList .)


state 137

    (44) commaExpressionList -> commaExpression . commaExpressionList
    (44) commaExpressionList -> . commaExpression commaExpressionList
    (45) commaExpressionList -> . empty
    (46) commaExpression -> . COMMA expression
    (2) empty -> .

    COMMA           shift and go to state 138
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    commaExpression                shift and go to state 137
    commaExpressionList            shift and go to state 151
    empty                          shift and go to state 139

state 138

    (46) commaExpression -> COMMA . expression
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 152

state 139

    (45) commaExpressionList -> empty .

    CPARENTHESIS    reduce using rule 45 (commaExpressionList -> empty .)


state 140

    (50) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS . statement elseStatement ENDIF
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 153
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 141

    (6) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration .

    ENDVARIABLES    reduce using rule 6 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration .)


state 142

    (7) declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression . declarationExtra SEMICOLON declaration
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression
    (10) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (14) declarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85
    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 154
    empty                          shift and go to state 33

state 143

    (16) arrayIndexesExtra -> COMMA expression arrayIndexesExtra .

    CBRACKETS       reduce using rule 16 (arrayIndexesExtra -> COMMA expression arrayIndexesExtra .)


state 144

    (10) declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra .

    SEMICOLON       reduce using rule 10 (declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra .)


state 145

    (11) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS . ASSIGNATION expression declarationExtra
    (13) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS . declarationExtra
    (10) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (14) declarationExtra -> . empty
    (2) empty -> .

    ASSIGNATION     shift and go to state 155
    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 33
    declarationExtra               shift and go to state 156

state 146

    (20) block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE . block
    (20) block -> . DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block
    (21) block -> . empty
    (2) empty -> .

    DEFINE          shift and go to state 19
    ENDBLOCKS       reduce using rule 2 (empty -> .)

    block                          shift and go to state 157
    empty                          shift and go to state 17

state 147

    (30) parameterExtra -> COMMA . variableType IDENTIFIER parameterExtra
    (24) variableType -> . NUMBER
    (25) variableType -> . WORDS
    (26) variableType -> . LETTER

    NUMBER          shift and go to state 13
    WORDS           shift and go to state 11
    LETTER          shift and go to state 14

    variableType                   shift and go to state 158

state 148

    (31) parameterExtra -> empty .

    CPARENTHESIS    reduce using rule 31 (parameterExtra -> empty .)


state 149

    (28) parameter -> variableType IDENTIFIER parameterExtra .

    CPARENTHESIS    reduce using rule 28 (parameter -> variableType IDENTIFIER parameterExtra .)


state 150

    (53) whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement . ENDWHILE

    ENDWHILE        shift and go to state 159


state 151

    (44) commaExpressionList -> commaExpression commaExpressionList .

    CPARENTHESIS    reduce using rule 44 (commaExpressionList -> commaExpression commaExpressionList .)


state 152

    (46) commaExpression -> COMMA expression .
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression

    COMMA           reduce using rule 46 (commaExpression -> COMMA expression .)
    CPARENTHESIS    reduce using rule 46 (commaExpression -> COMMA expression .)
    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85


state 153

    (50) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement . elseStatement ENDIF
    (51) elseStatement -> . ELSE statement
    (52) elseStatement -> . empty
    (2) empty -> .

    ELSE            shift and go to state 161
    ENDIF           reduce using rule 2 (empty -> .)

    elseStatement                  shift and go to state 160
    empty                          shift and go to state 162

state 154

    (7) declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra . SEMICOLON declaration

    SEMICOLON       shift and go to state 163


state 155

    (11) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION . expression declarationExtra
    (55) expression -> . location
    (56) expression -> . binaryExpression
    (57) expression -> . NONZEROINT
    (58) expression -> . FLAGVALUE
    (59) expression -> . NUMBERVALUE
    (60) expression -> . WORDSVALUE
    (61) expression -> . LETTERVALUE
    (62) expression -> . OPARENTHESIS expression CPARENTHESIS
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call
    (63) binaryExpression -> . expression OR expression
    (64) binaryExpression -> . expression AND expression
    (65) binaryExpression -> . expression LESSER expression
    (66) binaryExpression -> . expression GREATER expression
    (67) binaryExpression -> . expression EQUALITY expression
    (68) binaryExpression -> . expression PLUS expression
    (69) binaryExpression -> . expression MINUS expression
    (70) binaryExpression -> . expression MULTIPLICATION expression
    (71) binaryExpression -> . expression DIVISION expression
    (72) binaryExpression -> . expression MODULUS expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    NONZEROINT      shift and go to state 56
    FLAGVALUE       shift and go to state 48
    NUMBERVALUE     shift and go to state 47
    WORDSVALUE      shift and go to state 49
    LETTERVALUE     shift and go to state 51
    OPARENTHESIS    shift and go to state 50
    IDENTIFIER      shift and go to state 54

    call                           shift and go to state 52
    location                       shift and go to state 55
    binaryExpression               shift and go to state 53
    expression                     shift and go to state 164

state 156

    (13) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra .

    SEMICOLON       reduce using rule 13 (declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra .)


state 157

    (20) block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block .

    ENDBLOCKS       reduce using rule 20 (block -> DEFINE blockType IDENTIFIER parameters variables statement ENDDEFINE block .)


state 158

    (30) parameterExtra -> COMMA variableType . IDENTIFIER parameterExtra

    IDENTIFIER      shift and go to state 165


state 159

    (53) whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .

    IDENTIFIER      reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    RETURN          reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    IF              reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    WHILE           reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    FINISH          reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    ENDDEFINE       reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    ENDWHILE        reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    ELSE            reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)
    ENDIF           reduce using rule 53 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE .)


state 160

    (50) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement . ENDIF

    ENDIF           shift and go to state 166


state 161

    (51) elseStatement -> ELSE . statement
    (32) statement -> . assign SEMICOLON statement
    (33) statement -> . call SEMICOLON statement
    (34) statement -> . return empty statement
    (35) statement -> . ifStatement empty statement
    (36) statement -> . whileStatement empty statement
    (37) statement -> . empty
    (38) assign -> . location ASSIGNATION expression
    (42) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (47) return -> . RETURN returnExpression SEMICOLON
    (50) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF
    (53) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statement ENDWHILE
    (2) empty -> .
    (39) location -> . IDENTIFIER
    (40) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (41) location -> . call

    IDENTIFIER      shift and go to state 40
    RETURN          shift and go to state 35
    IF              shift and go to state 45
    WHILE           shift and go to state 36
    ENDIF           reduce using rule 2 (empty -> .)

    return                         shift and go to state 42
    whileStatement                 shift and go to state 44
    call                           shift and go to state 37
    location                       shift and go to state 38
    statement                      shift and go to state 167
    assign                         shift and go to state 46
    empty                          shift and go to state 41
    ifStatement                    shift and go to state 43

state 162

    (52) elseStatement -> empty .

    ENDIF           reduce using rule 52 (elseStatement -> empty .)


state 163

    (7) declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON . declaration
    (6) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON declaration
    (7) declaration -> . variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration
    (8) declaration -> . variableType IDENTIFIER declarationExtra SEMICOLON declaration
    (9) declaration -> . empty
    (24) variableType -> . NUMBER
    (25) variableType -> . WORDS
    (26) variableType -> . LETTER
    (2) empty -> .

    NUMBER          shift and go to state 13
    WORDS           shift and go to state 11
    LETTER          shift and go to state 14
    ENDVARIABLES    reduce using rule 2 (empty -> .)

    variableType                   shift and go to state 12
    declaration                    shift and go to state 168
    empty                          shift and go to state 16

state 164

    (11) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression . declarationExtra
    (63) binaryExpression -> expression . OR expression
    (64) binaryExpression -> expression . AND expression
    (65) binaryExpression -> expression . LESSER expression
    (66) binaryExpression -> expression . GREATER expression
    (67) binaryExpression -> expression . EQUALITY expression
    (68) binaryExpression -> expression . PLUS expression
    (69) binaryExpression -> expression . MINUS expression
    (70) binaryExpression -> expression . MULTIPLICATION expression
    (71) binaryExpression -> expression . DIVISION expression
    (72) binaryExpression -> expression . MODULUS expression
    (10) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (11) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra
    (12) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS declarationExtra
    (14) declarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 89
    AND             shift and go to state 86
    LESSER          shift and go to state 88
    GREATER         shift and go to state 87
    EQUALITY        shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 80
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 83
    MODULUS         shift and go to state 85
    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 33
    declarationExtra               shift and go to state 169

state 165

    (30) parameterExtra -> COMMA variableType IDENTIFIER . parameterExtra
    (30) parameterExtra -> . COMMA variableType IDENTIFIER parameterExtra
    (31) parameterExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 147
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    empty                          shift and go to state 148
    parameterExtra                 shift and go to state 170

state 166

    (50) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .

    IDENTIFIER      reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    RETURN          reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    IF              reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    WHILE           reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    FINISH          reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    ENDDEFINE       reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    ENDWHILE        reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    ELSE            reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)
    ENDIF           reduce using rule 50 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statement elseStatement ENDIF .)


state 167

    (51) elseStatement -> ELSE statement .

    ENDIF           reduce using rule 51 (elseStatement -> ELSE statement .)


state 168

    (7) declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration .

    ENDVARIABLES    reduce using rule 7 (declaration -> variableType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra SEMICOLON declaration .)


state 169

    (11) declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra .

    SEMICOLON       reduce using rule 11 (declarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression declarationExtra .)


state 170

    (30) parameterExtra -> COMMA variableType IDENTIFIER parameterExtra .

    CPARENTHESIS    reduce using rule 30 (parameterExtra -> COMMA variableType IDENTIFIER parameterExtra .)

