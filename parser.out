Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    DISPLAY
    NEWLINE

Grammar

Rule 0     S' -> simple
Rule 1     simple -> PROGRAM program ENDPROGRAM
Rule 2     empty -> <empty>
Rule 3     program -> variables blocks main
Rule 4     variables -> VARIABLES declarationList ENDVARIABLES
Rule 5     variables -> empty
Rule 6     declarationList -> declaration declarationList
Rule 7     declarationList -> empty
Rule 8     declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON
Rule 9     declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON
Rule 10    declaration -> variableType IDENTIFIER declarationExtra SEMICOLON
Rule 11    declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON
Rule 12    declaration -> empty
Rule 13    declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra
Rule 14    arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
Rule 15    declarationExtra -> COMMA IDENTIFIER declarationExtra
Rule 16    arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra
Rule 17    declarationExtra -> empty
Rule 18    arrayDeclarationExtra -> empty
Rule 19    arrayIndexes -> NUMBERVALUE arrayIndexesExtra
Rule 20    arrayIndexesExtra -> COMMA NUMBERVALUE arrayIndexesExtra
Rule 21    arrayIndexesExtra -> empty
Rule 22    blocks -> BLOCKS blockList ENDBLOCKS
Rule 23    blocks -> empty
Rule 24    blockList -> block blockList
Rule 25    blockList -> empty
Rule 26    block -> DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINE
Rule 27    block -> empty
Rule 28    blockType -> PROCEDURE
Rule 29    blockType -> variableType
Rule 30    blockType -> arrayType
Rule 31    variableType -> NUMBER
Rule 32    variableType -> WORDS
Rule 33    variableType -> LETTER
Rule 34    variableType -> FLAG
Rule 35    arrayType -> MANYNUMBERS
Rule 36    parameters -> OPARENTHESIS parameter CPARENTHESIS
Rule 37    parameter -> variableType IDENTIFIER parameterExtra
Rule 38    parameter -> empty
Rule 39    parameterExtra -> COMMA variableType IDENTIFIER parameterExtra
Rule 40    parameterExtra -> empty
Rule 41    statementPoint -> statementList
Rule 42    statementList -> statement statementList
Rule 43    statementList -> empty
Rule 44    statement -> assign SEMICOLON
Rule 45    statement -> call SEMICOLON
Rule 46    statement -> return empty
Rule 47    statement -> ifStatement empty
Rule 48    statement -> whileStatement empty
Rule 49    statement -> empty
Rule 50    assign -> location ASSIGNATION expression
Rule 51    location -> IDENTIFIER
Rule 52    location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
Rule 53    location -> call
Rule 54    call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
Rule 55    actuals -> expression commaExpressionList
Rule 56    commaExpressionList -> commaExpression commaExpressionList
Rule 57    commaExpressionList -> empty
Rule 58    commaExpression -> COMMA expression
Rule 59    return -> RETURN returnExpression SEMICOLON
Rule 60    returnExpression -> expression
Rule 61    returnExpression -> empty
Rule 62    ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF
Rule 63    elseStatement -> ELSE statementPoint
Rule 64    elseStatement -> empty
Rule 65    whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE
Rule 66    main -> START variables statementPoint FINISH
Rule 67    expression -> location
Rule 68    expression -> unaryExpression
Rule 69    expression -> binaryExpression
Rule 70    expression -> FLAGVALUE
Rule 71    expression -> NUMBERVALUE
Rule 72    expression -> WORDSVALUE
Rule 73    expression -> LETTERVALUE
Rule 74    expression -> OPARENTHESIS expression CPARENTHESIS
Rule 75    binaryExpression -> expression OR expression
Rule 76    binaryExpression -> expression AND expression
Rule 77    binaryExpression -> expression LESSER expression
Rule 78    binaryExpression -> expression GREATER expression
Rule 79    binaryExpression -> expression EQUALITY expression
Rule 80    binaryExpression -> expression PLUS expression
Rule 81    binaryExpression -> expression MINUS expression
Rule 82    binaryExpression -> expression MULTIPLICATION expression
Rule 83    binaryExpression -> expression DIVISION expression
Rule 84    binaryExpression -> expression MODULUS expression
Rule 85    unaryExpression -> NOT expression

Terminals, with rules where they appear

AND                  : 76
ASSIGNATION          : 8 9 13 14 50
BLOCKS               : 22
CBRACKETS            : 9 11 14 16 52
COMMA                : 13 14 15 16 20 39 58
CPARENTHESIS         : 36 54 62 65 74
DEFINE               : 26
DISPLAY              : 
DIVISION             : 83
ELSE                 : 63
ENDBLOCKS            : 22
ENDDEFINE            : 26
ENDIF                : 62
ENDPROGRAM           : 1
ENDVARIABLES         : 4
ENDWHILE             : 65
EQUALITY             : 79
FINISH               : 66
FLAG                 : 34
FLAGVALUE            : 70
GREATER              : 78
IDENTIFIER           : 8 9 10 11 13 14 15 16 26 37 39 51 52 54
IF                   : 62
LESSER               : 77
LETTER               : 33
LETTERVALUE          : 73
MANYNUMBERS          : 35
MINUS                : 81
MODULUS              : 84
MULTIPLICATION       : 82
NEWLINE              : 
NOT                  : 85
NUMBER               : 31
NUMBERVALUE          : 19 20 71
OBRACKETS            : 9 11 14 16 52
OPARENTHESIS         : 36 54 62 65 74
OR                   : 75
PLUS                 : 80
PROCEDURE            : 28
PROGRAM              : 1
RETURN               : 59
SEMICOLON            : 8 9 10 11 44 45 59
START                : 66
VARIABLES            : 4
WHILE                : 65
WORDS                : 32
WORDSVALUE           : 72
error                : 

Nonterminals, with rules where they appear

actuals              : 54
arrayDeclarationExtra : 9 11 14 16
arrayIndexes         : 9 11 14 16 52
arrayIndexesExtra    : 19 20
arrayType            : 9 11 30
assign               : 44
binaryExpression     : 69
block                : 24
blockList            : 22 24
blockType            : 26
blocks               : 3
call                 : 45 53
commaExpression      : 56
commaExpressionList  : 55 56
declaration          : 6
declarationExtra     : 8 10 13 15
declarationList      : 4 6
elseStatement        : 62
empty                : 5 7 12 17 18 21 23 25 27 38 40 43 46 47 48 49 57 61 64
expression           : 8 9 13 14 50 55 58 60 62 65 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85
ifStatement          : 47
location             : 50 67
main                 : 3
parameter            : 36
parameterExtra       : 37 39
parameters           : 26
program              : 1
return               : 46
returnExpression     : 59
simple               : 0
statement            : 42
statementList        : 41 42
statementPoint       : 26 62 63 65 66
unaryExpression      : 68
variableType         : 8 10 29 37 39
variables            : 3 26 66
whileStatement       : 48

Parsing method: LALR

state 0

    (0) S' -> . simple
    (1) simple -> . PROGRAM program ENDPROGRAM

    PROGRAM         shift and go to state 2

    simple                         shift and go to state 1

state 1

    (0) S' -> simple .



state 2

    (1) simple -> PROGRAM . program ENDPROGRAM
    (3) program -> . variables blocks main
    (4) variables -> . VARIABLES declarationList ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    BLOCKS          reduce using rule 2 (empty -> .)
    START           reduce using rule 2 (empty -> .)

    program                        shift and go to state 3
    variables                      shift and go to state 4
    empty                          shift and go to state 6

state 3

    (1) simple -> PROGRAM program . ENDPROGRAM

    ENDPROGRAM      shift and go to state 7


state 4

    (3) program -> variables . blocks main
    (22) blocks -> . BLOCKS blockList ENDBLOCKS
    (23) blocks -> . empty
    (2) empty -> .

    BLOCKS          shift and go to state 9
    START           reduce using rule 2 (empty -> .)

    blocks                         shift and go to state 8
    empty                          shift and go to state 10

state 5

    (4) variables -> VARIABLES . declarationList ENDVARIABLES
    (6) declarationList -> . declaration declarationList
    (7) declarationList -> . empty
    (8) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON
    (9) declaration -> . arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON
    (10) declaration -> . variableType IDENTIFIER declarationExtra SEMICOLON
    (11) declaration -> . arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON
    (12) declaration -> . empty
    (2) empty -> .
    (31) variableType -> . NUMBER
    (32) variableType -> . WORDS
    (33) variableType -> . LETTER
    (34) variableType -> . FLAG
    (35) arrayType -> . MANYNUMBERS

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for WORDS resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for FLAG resolved as shift
  ! shift/reduce conflict for MANYNUMBERS resolved as shift
    ENDVARIABLES    reduce using rule 2 (empty -> .)
    NUMBER          shift and go to state 16
    WORDS           shift and go to state 17
    LETTER          shift and go to state 18
    FLAG            shift and go to state 19
    MANYNUMBERS     shift and go to state 20

  ! NUMBER          [ reduce using rule 2 (empty -> .) ]
  ! WORDS           [ reduce using rule 2 (empty -> .) ]
  ! LETTER          [ reduce using rule 2 (empty -> .) ]
  ! FLAG            [ reduce using rule 2 (empty -> .) ]
  ! MANYNUMBERS     [ reduce using rule 2 (empty -> .) ]

    declarationList                shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    variableType                   shift and go to state 14
    arrayType                      shift and go to state 15

state 6

    (5) variables -> empty .

    BLOCKS          reduce using rule 5 (variables -> empty .)
    START           reduce using rule 5 (variables -> empty .)
    IDENTIFIER      reduce using rule 5 (variables -> empty .)
    RETURN          reduce using rule 5 (variables -> empty .)
    IF              reduce using rule 5 (variables -> empty .)
    WHILE           reduce using rule 5 (variables -> empty .)
    FINISH          reduce using rule 5 (variables -> empty .)
    ENDDEFINE       reduce using rule 5 (variables -> empty .)


state 7

    (1) simple -> PROGRAM program ENDPROGRAM .

    $end            reduce using rule 1 (simple -> PROGRAM program ENDPROGRAM .)


state 8

    (3) program -> variables blocks . main
    (66) main -> . START variables statementPoint FINISH

    START           shift and go to state 22

    main                           shift and go to state 21

state 9

    (22) blocks -> BLOCKS . blockList ENDBLOCKS
    (24) blockList -> . block blockList
    (25) blockList -> . empty
    (26) block -> . DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINE
    (27) block -> . empty
    (2) empty -> .

  ! shift/reduce conflict for DEFINE resolved as shift
    DEFINE          shift and go to state 26
    ENDBLOCKS       reduce using rule 2 (empty -> .)

  ! DEFINE          [ reduce using rule 2 (empty -> .) ]

    blockList                      shift and go to state 23
    block                          shift and go to state 24
    empty                          shift and go to state 25

state 10

    (23) blocks -> empty .

    START           reduce using rule 23 (blocks -> empty .)


state 11

    (4) variables -> VARIABLES declarationList . ENDVARIABLES

    ENDVARIABLES    shift and go to state 27


state 12

    (6) declarationList -> declaration . declarationList
    (6) declarationList -> . declaration declarationList
    (7) declarationList -> . empty
    (8) declaration -> . variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON
    (9) declaration -> . arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON
    (10) declaration -> . variableType IDENTIFIER declarationExtra SEMICOLON
    (11) declaration -> . arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON
    (12) declaration -> . empty
    (2) empty -> .
    (31) variableType -> . NUMBER
    (32) variableType -> . WORDS
    (33) variableType -> . LETTER
    (34) variableType -> . FLAG
    (35) arrayType -> . MANYNUMBERS

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for WORDS resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for FLAG resolved as shift
  ! shift/reduce conflict for MANYNUMBERS resolved as shift
    ENDVARIABLES    reduce using rule 2 (empty -> .)
    NUMBER          shift and go to state 16
    WORDS           shift and go to state 17
    LETTER          shift and go to state 18
    FLAG            shift and go to state 19
    MANYNUMBERS     shift and go to state 20

  ! NUMBER          [ reduce using rule 2 (empty -> .) ]
  ! WORDS           [ reduce using rule 2 (empty -> .) ]
  ! LETTER          [ reduce using rule 2 (empty -> .) ]
  ! FLAG            [ reduce using rule 2 (empty -> .) ]
  ! MANYNUMBERS     [ reduce using rule 2 (empty -> .) ]

    declaration                    shift and go to state 12
    declarationList                shift and go to state 28
    empty                          shift and go to state 13
    variableType                   shift and go to state 14
    arrayType                      shift and go to state 15

state 13

    (7) declarationList -> empty .
    (12) declaration -> empty .

  ! reduce/reduce conflict for ENDVARIABLES resolved using rule 7 (declarationList -> empty .)
    ENDVARIABLES    reduce using rule 7 (declarationList -> empty .)
    NUMBER          reduce using rule 12 (declaration -> empty .)
    WORDS           reduce using rule 12 (declaration -> empty .)
    LETTER          reduce using rule 12 (declaration -> empty .)
    FLAG            reduce using rule 12 (declaration -> empty .)
    MANYNUMBERS     reduce using rule 12 (declaration -> empty .)

  ! ENDVARIABLES    [ reduce using rule 12 (declaration -> empty .) ]


state 14

    (8) declaration -> variableType . IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON
    (10) declaration -> variableType . IDENTIFIER declarationExtra SEMICOLON

    IDENTIFIER      shift and go to state 29


state 15

    (9) declaration -> arrayType . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON
    (11) declaration -> arrayType . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON

    IDENTIFIER      shift and go to state 30


state 16

    (31) variableType -> NUMBER .

    IDENTIFIER      reduce using rule 31 (variableType -> NUMBER .)


state 17

    (32) variableType -> WORDS .

    IDENTIFIER      reduce using rule 32 (variableType -> WORDS .)


state 18

    (33) variableType -> LETTER .

    IDENTIFIER      reduce using rule 33 (variableType -> LETTER .)


state 19

    (34) variableType -> FLAG .

    IDENTIFIER      reduce using rule 34 (variableType -> FLAG .)


state 20

    (35) arrayType -> MANYNUMBERS .

    IDENTIFIER      reduce using rule 35 (arrayType -> MANYNUMBERS .)


state 21

    (3) program -> variables blocks main .

    ENDPROGRAM      reduce using rule 3 (program -> variables blocks main .)


state 22

    (66) main -> START . variables statementPoint FINISH
    (4) variables -> . VARIABLES declarationList ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)

    variables                      shift and go to state 31
    empty                          shift and go to state 6

state 23

    (22) blocks -> BLOCKS blockList . ENDBLOCKS

    ENDBLOCKS       shift and go to state 32


state 24

    (24) blockList -> block . blockList
    (24) blockList -> . block blockList
    (25) blockList -> . empty
    (26) block -> . DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINE
    (27) block -> . empty
    (2) empty -> .

  ! shift/reduce conflict for DEFINE resolved as shift
    DEFINE          shift and go to state 26
    ENDBLOCKS       reduce using rule 2 (empty -> .)

  ! DEFINE          [ reduce using rule 2 (empty -> .) ]

    block                          shift and go to state 24
    blockList                      shift and go to state 33
    empty                          shift and go to state 25

state 25

    (25) blockList -> empty .
    (27) block -> empty .

  ! reduce/reduce conflict for ENDBLOCKS resolved using rule 25 (blockList -> empty .)
    ENDBLOCKS       reduce using rule 25 (blockList -> empty .)
    DEFINE          reduce using rule 27 (block -> empty .)

  ! ENDBLOCKS       [ reduce using rule 27 (block -> empty .) ]


state 26

    (26) block -> DEFINE . blockType IDENTIFIER parameters variables statementPoint ENDDEFINE
    (28) blockType -> . PROCEDURE
    (29) blockType -> . variableType
    (30) blockType -> . arrayType
    (31) variableType -> . NUMBER
    (32) variableType -> . WORDS
    (33) variableType -> . LETTER
    (34) variableType -> . FLAG
    (35) arrayType -> . MANYNUMBERS

    PROCEDURE       shift and go to state 35
    NUMBER          shift and go to state 16
    WORDS           shift and go to state 17
    LETTER          shift and go to state 18
    FLAG            shift and go to state 19
    MANYNUMBERS     shift and go to state 20

    blockType                      shift and go to state 34
    variableType                   shift and go to state 36
    arrayType                      shift and go to state 37

state 27

    (4) variables -> VARIABLES declarationList ENDVARIABLES .

    BLOCKS          reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)
    START           reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)
    IDENTIFIER      reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)
    RETURN          reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)
    IF              reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)
    WHILE           reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)
    FINISH          reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)
    ENDDEFINE       reduce using rule 4 (variables -> VARIABLES declarationList ENDVARIABLES .)


state 28

    (6) declarationList -> declaration declarationList .

    ENDVARIABLES    reduce using rule 6 (declarationList -> declaration declarationList .)


state 29

    (8) declaration -> variableType IDENTIFIER . ASSIGNATION expression declarationExtra SEMICOLON
    (10) declaration -> variableType IDENTIFIER . declarationExtra SEMICOLON
    (13) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (15) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (17) declarationExtra -> . empty
    (2) empty -> .

    ASSIGNATION     shift and go to state 38
    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 39
    empty                          shift and go to state 41

state 30

    (9) declaration -> arrayType IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON
    (11) declaration -> arrayType IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON

    OBRACKETS       shift and go to state 42


state 31

    (66) main -> START variables . statementPoint FINISH
    (41) statementPoint -> . statementList
    (42) statementList -> . statement statementList
    (43) statementList -> . empty
    (44) statement -> . assign SEMICOLON
    (45) statement -> . call SEMICOLON
    (46) statement -> . return empty
    (47) statement -> . ifStatement empty
    (48) statement -> . whileStatement empty
    (49) statement -> . empty
    (2) empty -> .
    (50) assign -> . location ASSIGNATION expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (59) return -> . RETURN returnExpression SEMICOLON
    (62) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF
    (65) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    FINISH          reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    statementPoint                 shift and go to state 43
    statementList                  shift and go to state 44
    statement                      shift and go to state 45
    empty                          shift and go to state 46
    assign                         shift and go to state 47
    call                           shift and go to state 48
    return                         shift and go to state 49
    ifStatement                    shift and go to state 50
    whileStatement                 shift and go to state 51
    location                       shift and go to state 52

state 32

    (22) blocks -> BLOCKS blockList ENDBLOCKS .

    START           reduce using rule 22 (blocks -> BLOCKS blockList ENDBLOCKS .)


state 33

    (24) blockList -> block blockList .

    ENDBLOCKS       reduce using rule 24 (blockList -> block blockList .)


state 34

    (26) block -> DEFINE blockType . IDENTIFIER parameters variables statementPoint ENDDEFINE

    IDENTIFIER      shift and go to state 57


state 35

    (28) blockType -> PROCEDURE .

    IDENTIFIER      reduce using rule 28 (blockType -> PROCEDURE .)


state 36

    (29) blockType -> variableType .

    IDENTIFIER      reduce using rule 29 (blockType -> variableType .)


state 37

    (30) blockType -> arrayType .

    IDENTIFIER      reduce using rule 30 (blockType -> arrayType .)


state 38

    (8) declaration -> variableType IDENTIFIER ASSIGNATION . expression declarationExtra SEMICOLON
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 59
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 39

    (10) declaration -> variableType IDENTIFIER declarationExtra . SEMICOLON

    SEMICOLON       shift and go to state 70


state 40

    (13) declarationExtra -> COMMA . IDENTIFIER ASSIGNATION expression declarationExtra
    (15) declarationExtra -> COMMA . IDENTIFIER declarationExtra

    IDENTIFIER      shift and go to state 71


state 41

    (17) declarationExtra -> empty .

    SEMICOLON       reduce using rule 17 (declarationExtra -> empty .)


state 42

    (9) declaration -> arrayType IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON
    (11) declaration -> arrayType IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON
    (19) arrayIndexes -> . NUMBERVALUE arrayIndexesExtra

    NUMBERVALUE     shift and go to state 73

    arrayIndexes                   shift and go to state 72

state 43

    (66) main -> START variables statementPoint . FINISH

    FINISH          shift and go to state 74


state 44

    (41) statementPoint -> statementList .

    FINISH          reduce using rule 41 (statementPoint -> statementList .)
    ENDDEFINE       reduce using rule 41 (statementPoint -> statementList .)
    ELSE            reduce using rule 41 (statementPoint -> statementList .)
    ENDIF           reduce using rule 41 (statementPoint -> statementList .)
    ENDWHILE        reduce using rule 41 (statementPoint -> statementList .)


state 45

    (42) statementList -> statement . statementList
    (42) statementList -> . statement statementList
    (43) statementList -> . empty
    (44) statement -> . assign SEMICOLON
    (45) statement -> . call SEMICOLON
    (46) statement -> . return empty
    (47) statement -> . ifStatement empty
    (48) statement -> . whileStatement empty
    (49) statement -> . empty
    (2) empty -> .
    (50) assign -> . location ASSIGNATION expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (59) return -> . RETURN returnExpression SEMICOLON
    (62) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF
    (65) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    statement                      shift and go to state 45
    statementList                  shift and go to state 75
    empty                          shift and go to state 46
    assign                         shift and go to state 47
    call                           shift and go to state 48
    return                         shift and go to state 49
    ifStatement                    shift and go to state 50
    whileStatement                 shift and go to state 51
    location                       shift and go to state 52

state 46

    (43) statementList -> empty .
    (49) statement -> empty .

  ! reduce/reduce conflict for FINISH resolved using rule 43 (statementList -> empty .)
  ! reduce/reduce conflict for ENDDEFINE resolved using rule 43 (statementList -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (statementList -> empty .)
  ! reduce/reduce conflict for ENDIF resolved using rule 43 (statementList -> empty .)
  ! reduce/reduce conflict for ENDWHILE resolved using rule 43 (statementList -> empty .)
    FINISH          reduce using rule 43 (statementList -> empty .)
    ENDDEFINE       reduce using rule 43 (statementList -> empty .)
    ELSE            reduce using rule 43 (statementList -> empty .)
    ENDIF           reduce using rule 43 (statementList -> empty .)
    ENDWHILE        reduce using rule 43 (statementList -> empty .)
    IDENTIFIER      reduce using rule 49 (statement -> empty .)
    RETURN          reduce using rule 49 (statement -> empty .)
    IF              reduce using rule 49 (statement -> empty .)
    WHILE           reduce using rule 49 (statement -> empty .)

  ! FINISH          [ reduce using rule 49 (statement -> empty .) ]
  ! ENDDEFINE       [ reduce using rule 49 (statement -> empty .) ]
  ! ELSE            [ reduce using rule 49 (statement -> empty .) ]
  ! ENDIF           [ reduce using rule 49 (statement -> empty .) ]
  ! ENDWHILE        [ reduce using rule 49 (statement -> empty .) ]


state 47

    (44) statement -> assign . SEMICOLON

    SEMICOLON       shift and go to state 76


state 48

    (45) statement -> call . SEMICOLON
    (53) location -> call .

    SEMICOLON       shift and go to state 77
    ASSIGNATION     reduce using rule 53 (location -> call .)


state 49

    (46) statement -> return . empty
    (2) empty -> .

    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)

    empty                          shift and go to state 78

state 50

    (47) statement -> ifStatement . empty
    (2) empty -> .

    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)

    empty                          shift and go to state 79

state 51

    (48) statement -> whileStatement . empty
    (2) empty -> .

    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    FINISH          reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)
    ENDWHILE        reduce using rule 2 (empty -> .)

    empty                          shift and go to state 80

state 52

    (50) assign -> location . ASSIGNATION expression

    ASSIGNATION     shift and go to state 81


state 53

    (54) call -> IDENTIFIER . OPARENTHESIS actuals CPARENTHESIS
    (51) location -> IDENTIFIER .
    (52) location -> IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS

    OPARENTHESIS    shift and go to state 82
    ASSIGNATION     reduce using rule 51 (location -> IDENTIFIER .)
    OBRACKETS       shift and go to state 83


state 54

    (59) return -> RETURN . returnExpression SEMICOLON
    (60) returnExpression -> . expression
    (61) returnExpression -> . empty
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (2) empty -> .
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    SEMICOLON       reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    returnExpression               shift and go to state 84
    expression                     shift and go to state 85
    empty                          shift and go to state 86
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 55

    (62) ifStatement -> IF . OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF

    OPARENTHESIS    shift and go to state 87


state 56

    (65) whileStatement -> WHILE . OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE

    OPARENTHESIS    shift and go to state 88


state 57

    (26) block -> DEFINE blockType IDENTIFIER . parameters variables statementPoint ENDDEFINE
    (36) parameters -> . OPARENTHESIS parameter CPARENTHESIS

    OPARENTHESIS    shift and go to state 90

    parameters                     shift and go to state 89

state 58

    (51) location -> IDENTIFIER .
    (52) location -> IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS
    (54) call -> IDENTIFIER . OPARENTHESIS actuals CPARENTHESIS

    OR              reduce using rule 51 (location -> IDENTIFIER .)
    AND             reduce using rule 51 (location -> IDENTIFIER .)
    LESSER          reduce using rule 51 (location -> IDENTIFIER .)
    GREATER         reduce using rule 51 (location -> IDENTIFIER .)
    EQUALITY        reduce using rule 51 (location -> IDENTIFIER .)
    PLUS            reduce using rule 51 (location -> IDENTIFIER .)
    MINUS           reduce using rule 51 (location -> IDENTIFIER .)
    MULTIPLICATION  reduce using rule 51 (location -> IDENTIFIER .)
    DIVISION        reduce using rule 51 (location -> IDENTIFIER .)
    MODULUS         reduce using rule 51 (location -> IDENTIFIER .)
    COMMA           reduce using rule 51 (location -> IDENTIFIER .)
    SEMICOLON       reduce using rule 51 (location -> IDENTIFIER .)
    CPARENTHESIS    reduce using rule 51 (location -> IDENTIFIER .)
    OBRACKETS       shift and go to state 83
    OPARENTHESIS    shift and go to state 82


state 59

    (8) declaration -> variableType IDENTIFIER ASSIGNATION expression . declarationExtra SEMICOLON
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression
    (13) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (15) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (17) declarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101
    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 91
    empty                          shift and go to state 41

state 60

    (67) expression -> location .

    OR              reduce using rule 67 (expression -> location .)
    AND             reduce using rule 67 (expression -> location .)
    LESSER          reduce using rule 67 (expression -> location .)
    GREATER         reduce using rule 67 (expression -> location .)
    EQUALITY        reduce using rule 67 (expression -> location .)
    PLUS            reduce using rule 67 (expression -> location .)
    MINUS           reduce using rule 67 (expression -> location .)
    MULTIPLICATION  reduce using rule 67 (expression -> location .)
    DIVISION        reduce using rule 67 (expression -> location .)
    MODULUS         reduce using rule 67 (expression -> location .)
    COMMA           reduce using rule 67 (expression -> location .)
    SEMICOLON       reduce using rule 67 (expression -> location .)
    CPARENTHESIS    reduce using rule 67 (expression -> location .)


state 61

    (68) expression -> unaryExpression .

    OR              reduce using rule 68 (expression -> unaryExpression .)
    AND             reduce using rule 68 (expression -> unaryExpression .)
    LESSER          reduce using rule 68 (expression -> unaryExpression .)
    GREATER         reduce using rule 68 (expression -> unaryExpression .)
    EQUALITY        reduce using rule 68 (expression -> unaryExpression .)
    PLUS            reduce using rule 68 (expression -> unaryExpression .)
    MINUS           reduce using rule 68 (expression -> unaryExpression .)
    MULTIPLICATION  reduce using rule 68 (expression -> unaryExpression .)
    DIVISION        reduce using rule 68 (expression -> unaryExpression .)
    MODULUS         reduce using rule 68 (expression -> unaryExpression .)
    COMMA           reduce using rule 68 (expression -> unaryExpression .)
    SEMICOLON       reduce using rule 68 (expression -> unaryExpression .)
    CPARENTHESIS    reduce using rule 68 (expression -> unaryExpression .)


state 62

    (69) expression -> binaryExpression .

    OR              reduce using rule 69 (expression -> binaryExpression .)
    AND             reduce using rule 69 (expression -> binaryExpression .)
    LESSER          reduce using rule 69 (expression -> binaryExpression .)
    GREATER         reduce using rule 69 (expression -> binaryExpression .)
    EQUALITY        reduce using rule 69 (expression -> binaryExpression .)
    PLUS            reduce using rule 69 (expression -> binaryExpression .)
    MINUS           reduce using rule 69 (expression -> binaryExpression .)
    MULTIPLICATION  reduce using rule 69 (expression -> binaryExpression .)
    DIVISION        reduce using rule 69 (expression -> binaryExpression .)
    MODULUS         reduce using rule 69 (expression -> binaryExpression .)
    COMMA           reduce using rule 69 (expression -> binaryExpression .)
    SEMICOLON       reduce using rule 69 (expression -> binaryExpression .)
    CPARENTHESIS    reduce using rule 69 (expression -> binaryExpression .)


state 63

    (70) expression -> FLAGVALUE .

    OR              reduce using rule 70 (expression -> FLAGVALUE .)
    AND             reduce using rule 70 (expression -> FLAGVALUE .)
    LESSER          reduce using rule 70 (expression -> FLAGVALUE .)
    GREATER         reduce using rule 70 (expression -> FLAGVALUE .)
    EQUALITY        reduce using rule 70 (expression -> FLAGVALUE .)
    PLUS            reduce using rule 70 (expression -> FLAGVALUE .)
    MINUS           reduce using rule 70 (expression -> FLAGVALUE .)
    MULTIPLICATION  reduce using rule 70 (expression -> FLAGVALUE .)
    DIVISION        reduce using rule 70 (expression -> FLAGVALUE .)
    MODULUS         reduce using rule 70 (expression -> FLAGVALUE .)
    COMMA           reduce using rule 70 (expression -> FLAGVALUE .)
    SEMICOLON       reduce using rule 70 (expression -> FLAGVALUE .)
    CPARENTHESIS    reduce using rule 70 (expression -> FLAGVALUE .)


state 64

    (71) expression -> NUMBERVALUE .

    OR              reduce using rule 71 (expression -> NUMBERVALUE .)
    AND             reduce using rule 71 (expression -> NUMBERVALUE .)
    LESSER          reduce using rule 71 (expression -> NUMBERVALUE .)
    GREATER         reduce using rule 71 (expression -> NUMBERVALUE .)
    EQUALITY        reduce using rule 71 (expression -> NUMBERVALUE .)
    PLUS            reduce using rule 71 (expression -> NUMBERVALUE .)
    MINUS           reduce using rule 71 (expression -> NUMBERVALUE .)
    MULTIPLICATION  reduce using rule 71 (expression -> NUMBERVALUE .)
    DIVISION        reduce using rule 71 (expression -> NUMBERVALUE .)
    MODULUS         reduce using rule 71 (expression -> NUMBERVALUE .)
    COMMA           reduce using rule 71 (expression -> NUMBERVALUE .)
    SEMICOLON       reduce using rule 71 (expression -> NUMBERVALUE .)
    CPARENTHESIS    reduce using rule 71 (expression -> NUMBERVALUE .)


state 65

    (72) expression -> WORDSVALUE .

    OR              reduce using rule 72 (expression -> WORDSVALUE .)
    AND             reduce using rule 72 (expression -> WORDSVALUE .)
    LESSER          reduce using rule 72 (expression -> WORDSVALUE .)
    GREATER         reduce using rule 72 (expression -> WORDSVALUE .)
    EQUALITY        reduce using rule 72 (expression -> WORDSVALUE .)
    PLUS            reduce using rule 72 (expression -> WORDSVALUE .)
    MINUS           reduce using rule 72 (expression -> WORDSVALUE .)
    MULTIPLICATION  reduce using rule 72 (expression -> WORDSVALUE .)
    DIVISION        reduce using rule 72 (expression -> WORDSVALUE .)
    MODULUS         reduce using rule 72 (expression -> WORDSVALUE .)
    COMMA           reduce using rule 72 (expression -> WORDSVALUE .)
    SEMICOLON       reduce using rule 72 (expression -> WORDSVALUE .)
    CPARENTHESIS    reduce using rule 72 (expression -> WORDSVALUE .)


state 66

    (73) expression -> LETTERVALUE .

    OR              reduce using rule 73 (expression -> LETTERVALUE .)
    AND             reduce using rule 73 (expression -> LETTERVALUE .)
    LESSER          reduce using rule 73 (expression -> LETTERVALUE .)
    GREATER         reduce using rule 73 (expression -> LETTERVALUE .)
    EQUALITY        reduce using rule 73 (expression -> LETTERVALUE .)
    PLUS            reduce using rule 73 (expression -> LETTERVALUE .)
    MINUS           reduce using rule 73 (expression -> LETTERVALUE .)
    MULTIPLICATION  reduce using rule 73 (expression -> LETTERVALUE .)
    DIVISION        reduce using rule 73 (expression -> LETTERVALUE .)
    MODULUS         reduce using rule 73 (expression -> LETTERVALUE .)
    COMMA           reduce using rule 73 (expression -> LETTERVALUE .)
    SEMICOLON       reduce using rule 73 (expression -> LETTERVALUE .)
    CPARENTHESIS    reduce using rule 73 (expression -> LETTERVALUE .)


state 67

    (74) expression -> OPARENTHESIS . expression CPARENTHESIS
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 102
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 68

    (53) location -> call .

    OR              reduce using rule 53 (location -> call .)
    AND             reduce using rule 53 (location -> call .)
    LESSER          reduce using rule 53 (location -> call .)
    GREATER         reduce using rule 53 (location -> call .)
    EQUALITY        reduce using rule 53 (location -> call .)
    PLUS            reduce using rule 53 (location -> call .)
    MINUS           reduce using rule 53 (location -> call .)
    MULTIPLICATION  reduce using rule 53 (location -> call .)
    DIVISION        reduce using rule 53 (location -> call .)
    MODULUS         reduce using rule 53 (location -> call .)
    COMMA           reduce using rule 53 (location -> call .)
    SEMICOLON       reduce using rule 53 (location -> call .)
    CPARENTHESIS    reduce using rule 53 (location -> call .)


state 69

    (85) unaryExpression -> NOT . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 103
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 70

    (10) declaration -> variableType IDENTIFIER declarationExtra SEMICOLON .

    NUMBER          reduce using rule 10 (declaration -> variableType IDENTIFIER declarationExtra SEMICOLON .)
    WORDS           reduce using rule 10 (declaration -> variableType IDENTIFIER declarationExtra SEMICOLON .)
    LETTER          reduce using rule 10 (declaration -> variableType IDENTIFIER declarationExtra SEMICOLON .)
    FLAG            reduce using rule 10 (declaration -> variableType IDENTIFIER declarationExtra SEMICOLON .)
    MANYNUMBERS     reduce using rule 10 (declaration -> variableType IDENTIFIER declarationExtra SEMICOLON .)
    ENDVARIABLES    reduce using rule 10 (declaration -> variableType IDENTIFIER declarationExtra SEMICOLON .)


state 71

    (13) declarationExtra -> COMMA IDENTIFIER . ASSIGNATION expression declarationExtra
    (15) declarationExtra -> COMMA IDENTIFIER . declarationExtra
    (13) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (15) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (17) declarationExtra -> . empty
    (2) empty -> .

    ASSIGNATION     shift and go to state 104
    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 105
    empty                          shift and go to state 41

state 72

    (9) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON
    (11) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS arrayDeclarationExtra SEMICOLON

    CBRACKETS       shift and go to state 106


state 73

    (19) arrayIndexes -> NUMBERVALUE . arrayIndexesExtra
    (20) arrayIndexesExtra -> . COMMA NUMBERVALUE arrayIndexesExtra
    (21) arrayIndexesExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 108
    CBRACKETS       reduce using rule 2 (empty -> .)

    arrayIndexesExtra              shift and go to state 107
    empty                          shift and go to state 109

state 74

    (66) main -> START variables statementPoint FINISH .

    ENDPROGRAM      reduce using rule 66 (main -> START variables statementPoint FINISH .)


state 75

    (42) statementList -> statement statementList .

    FINISH          reduce using rule 42 (statementList -> statement statementList .)
    ENDDEFINE       reduce using rule 42 (statementList -> statement statementList .)
    ELSE            reduce using rule 42 (statementList -> statement statementList .)
    ENDIF           reduce using rule 42 (statementList -> statement statementList .)
    ENDWHILE        reduce using rule 42 (statementList -> statement statementList .)


state 76

    (44) statement -> assign SEMICOLON .

    IDENTIFIER      reduce using rule 44 (statement -> assign SEMICOLON .)
    RETURN          reduce using rule 44 (statement -> assign SEMICOLON .)
    IF              reduce using rule 44 (statement -> assign SEMICOLON .)
    WHILE           reduce using rule 44 (statement -> assign SEMICOLON .)
    FINISH          reduce using rule 44 (statement -> assign SEMICOLON .)
    ENDDEFINE       reduce using rule 44 (statement -> assign SEMICOLON .)
    ELSE            reduce using rule 44 (statement -> assign SEMICOLON .)
    ENDIF           reduce using rule 44 (statement -> assign SEMICOLON .)
    ENDWHILE        reduce using rule 44 (statement -> assign SEMICOLON .)


state 77

    (45) statement -> call SEMICOLON .

    IDENTIFIER      reduce using rule 45 (statement -> call SEMICOLON .)
    RETURN          reduce using rule 45 (statement -> call SEMICOLON .)
    IF              reduce using rule 45 (statement -> call SEMICOLON .)
    WHILE           reduce using rule 45 (statement -> call SEMICOLON .)
    FINISH          reduce using rule 45 (statement -> call SEMICOLON .)
    ENDDEFINE       reduce using rule 45 (statement -> call SEMICOLON .)
    ELSE            reduce using rule 45 (statement -> call SEMICOLON .)
    ENDIF           reduce using rule 45 (statement -> call SEMICOLON .)
    ENDWHILE        reduce using rule 45 (statement -> call SEMICOLON .)


state 78

    (46) statement -> return empty .

    IDENTIFIER      reduce using rule 46 (statement -> return empty .)
    RETURN          reduce using rule 46 (statement -> return empty .)
    IF              reduce using rule 46 (statement -> return empty .)
    WHILE           reduce using rule 46 (statement -> return empty .)
    FINISH          reduce using rule 46 (statement -> return empty .)
    ENDDEFINE       reduce using rule 46 (statement -> return empty .)
    ELSE            reduce using rule 46 (statement -> return empty .)
    ENDIF           reduce using rule 46 (statement -> return empty .)
    ENDWHILE        reduce using rule 46 (statement -> return empty .)


state 79

    (47) statement -> ifStatement empty .

    IDENTIFIER      reduce using rule 47 (statement -> ifStatement empty .)
    RETURN          reduce using rule 47 (statement -> ifStatement empty .)
    IF              reduce using rule 47 (statement -> ifStatement empty .)
    WHILE           reduce using rule 47 (statement -> ifStatement empty .)
    FINISH          reduce using rule 47 (statement -> ifStatement empty .)
    ENDDEFINE       reduce using rule 47 (statement -> ifStatement empty .)
    ELSE            reduce using rule 47 (statement -> ifStatement empty .)
    ENDIF           reduce using rule 47 (statement -> ifStatement empty .)
    ENDWHILE        reduce using rule 47 (statement -> ifStatement empty .)


state 80

    (48) statement -> whileStatement empty .

    IDENTIFIER      reduce using rule 48 (statement -> whileStatement empty .)
    RETURN          reduce using rule 48 (statement -> whileStatement empty .)
    IF              reduce using rule 48 (statement -> whileStatement empty .)
    WHILE           reduce using rule 48 (statement -> whileStatement empty .)
    FINISH          reduce using rule 48 (statement -> whileStatement empty .)
    ENDDEFINE       reduce using rule 48 (statement -> whileStatement empty .)
    ELSE            reduce using rule 48 (statement -> whileStatement empty .)
    ENDIF           reduce using rule 48 (statement -> whileStatement empty .)
    ENDWHILE        reduce using rule 48 (statement -> whileStatement empty .)


state 81

    (50) assign -> location ASSIGNATION . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    location                       shift and go to state 60
    expression                     shift and go to state 110
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 82

    (54) call -> IDENTIFIER OPARENTHESIS . actuals CPARENTHESIS
    (55) actuals -> . expression commaExpressionList
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    actuals                        shift and go to state 111
    expression                     shift and go to state 112
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 83

    (52) location -> IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS
    (19) arrayIndexes -> . NUMBERVALUE arrayIndexesExtra

    NUMBERVALUE     shift and go to state 73

    arrayIndexes                   shift and go to state 113

state 84

    (59) return -> RETURN returnExpression . SEMICOLON

    SEMICOLON       shift and go to state 114


state 85

    (60) returnExpression -> expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    SEMICOLON       reduce using rule 60 (returnExpression -> expression .)
    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101


state 86

    (61) returnExpression -> empty .

    SEMICOLON       reduce using rule 61 (returnExpression -> empty .)


state 87

    (62) ifStatement -> IF OPARENTHESIS . expression CPARENTHESIS statementPoint elseStatement ENDIF
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 115
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 88

    (65) whileStatement -> WHILE OPARENTHESIS . expression CPARENTHESIS statementPoint ENDWHILE
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 116
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 89

    (26) block -> DEFINE blockType IDENTIFIER parameters . variables statementPoint ENDDEFINE
    (4) variables -> . VARIABLES declarationList ENDVARIABLES
    (5) variables -> . empty
    (2) empty -> .

    VARIABLES       shift and go to state 5
    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ENDDEFINE       reduce using rule 2 (empty -> .)

    variables                      shift and go to state 117
    empty                          shift and go to state 6

state 90

    (36) parameters -> OPARENTHESIS . parameter CPARENTHESIS
    (37) parameter -> . variableType IDENTIFIER parameterExtra
    (38) parameter -> . empty
    (31) variableType -> . NUMBER
    (32) variableType -> . WORDS
    (33) variableType -> . LETTER
    (34) variableType -> . FLAG
    (2) empty -> .

    NUMBER          shift and go to state 16
    WORDS           shift and go to state 17
    LETTER          shift and go to state 18
    FLAG            shift and go to state 19
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    parameter                      shift and go to state 118
    variableType                   shift and go to state 119
    empty                          shift and go to state 120

state 91

    (8) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra . SEMICOLON

    SEMICOLON       shift and go to state 121


state 92

    (75) binaryExpression -> expression OR . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 122
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 93

    (76) binaryExpression -> expression AND . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 123
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 94

    (77) binaryExpression -> expression LESSER . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 124
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 95

    (78) binaryExpression -> expression GREATER . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 125
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 96

    (79) binaryExpression -> expression EQUALITY . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 126
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 97

    (80) binaryExpression -> expression PLUS . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 127
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 98

    (81) binaryExpression -> expression MINUS . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 128
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 99

    (82) binaryExpression -> expression MULTIPLICATION . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 129
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 100

    (83) binaryExpression -> expression DIVISION . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 130
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 101

    (84) binaryExpression -> expression MODULUS . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 131
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 102

    (74) expression -> OPARENTHESIS expression . CPARENTHESIS
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    CPARENTHESIS    shift and go to state 132
    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101


state 103

    (85) unaryExpression -> NOT expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 85 (unaryExpression -> NOT expression .)
    AND             reduce using rule 85 (unaryExpression -> NOT expression .)
    LESSER          reduce using rule 85 (unaryExpression -> NOT expression .)
    GREATER         reduce using rule 85 (unaryExpression -> NOT expression .)
    EQUALITY        reduce using rule 85 (unaryExpression -> NOT expression .)
    PLUS            reduce using rule 85 (unaryExpression -> NOT expression .)
    MINUS           reduce using rule 85 (unaryExpression -> NOT expression .)
    MULTIPLICATION  reduce using rule 85 (unaryExpression -> NOT expression .)
    DIVISION        reduce using rule 85 (unaryExpression -> NOT expression .)
    MODULUS         reduce using rule 85 (unaryExpression -> NOT expression .)
    COMMA           reduce using rule 85 (unaryExpression -> NOT expression .)
    SEMICOLON       reduce using rule 85 (unaryExpression -> NOT expression .)
    CPARENTHESIS    reduce using rule 85 (unaryExpression -> NOT expression .)

  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLICATION  [ shift and go to state 99 ]
  ! DIVISION        [ shift and go to state 100 ]
  ! MODULUS         [ shift and go to state 101 ]


state 104

    (13) declarationExtra -> COMMA IDENTIFIER ASSIGNATION . expression declarationExtra
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 133
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 105

    (15) declarationExtra -> COMMA IDENTIFIER declarationExtra .

    SEMICOLON       reduce using rule 15 (declarationExtra -> COMMA IDENTIFIER declarationExtra .)


state 106

    (9) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS . ASSIGNATION expression arrayDeclarationExtra SEMICOLON
    (11) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS . arrayDeclarationExtra SEMICOLON
    (14) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra
    (18) arrayDeclarationExtra -> . empty
    (2) empty -> .

    ASSIGNATION     shift and go to state 134
    COMMA           shift and go to state 136
    SEMICOLON       reduce using rule 2 (empty -> .)

    arrayDeclarationExtra          shift and go to state 135
    empty                          shift and go to state 137

state 107

    (19) arrayIndexes -> NUMBERVALUE arrayIndexesExtra .

    CBRACKETS       reduce using rule 19 (arrayIndexes -> NUMBERVALUE arrayIndexesExtra .)


state 108

    (20) arrayIndexesExtra -> COMMA . NUMBERVALUE arrayIndexesExtra

    NUMBERVALUE     shift and go to state 138


state 109

    (21) arrayIndexesExtra -> empty .

    CBRACKETS       reduce using rule 21 (arrayIndexesExtra -> empty .)


state 110

    (50) assign -> location ASSIGNATION expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    SEMICOLON       reduce using rule 50 (assign -> location ASSIGNATION expression .)
    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101


state 111

    (54) call -> IDENTIFIER OPARENTHESIS actuals . CPARENTHESIS

    CPARENTHESIS    shift and go to state 139


state 112

    (55) actuals -> expression . commaExpressionList
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression
    (56) commaExpressionList -> . commaExpression commaExpressionList
    (57) commaExpressionList -> . empty
    (58) commaExpression -> . COMMA expression
    (2) empty -> .

    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101
    COMMA           shift and go to state 143
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    commaExpressionList            shift and go to state 140
    commaExpression                shift and go to state 141
    empty                          shift and go to state 142

state 113

    (52) location -> IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS

    CBRACKETS       shift and go to state 144


state 114

    (59) return -> RETURN returnExpression SEMICOLON .

    IDENTIFIER      reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    RETURN          reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    IF              reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    WHILE           reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    FINISH          reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    ENDDEFINE       reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    ELSE            reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    ENDIF           reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)
    ENDWHILE        reduce using rule 59 (return -> RETURN returnExpression SEMICOLON .)


state 115

    (62) ifStatement -> IF OPARENTHESIS expression . CPARENTHESIS statementPoint elseStatement ENDIF
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    CPARENTHESIS    shift and go to state 145
    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101


state 116

    (65) whileStatement -> WHILE OPARENTHESIS expression . CPARENTHESIS statementPoint ENDWHILE
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    CPARENTHESIS    shift and go to state 146
    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101


state 117

    (26) block -> DEFINE blockType IDENTIFIER parameters variables . statementPoint ENDDEFINE
    (41) statementPoint -> . statementList
    (42) statementList -> . statement statementList
    (43) statementList -> . empty
    (44) statement -> . assign SEMICOLON
    (45) statement -> . call SEMICOLON
    (46) statement -> . return empty
    (47) statement -> . ifStatement empty
    (48) statement -> . whileStatement empty
    (49) statement -> . empty
    (2) empty -> .
    (50) assign -> . location ASSIGNATION expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (59) return -> . RETURN returnExpression SEMICOLON
    (62) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF
    (65) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ENDDEFINE       reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    statementPoint                 shift and go to state 147
    statementList                  shift and go to state 44
    statement                      shift and go to state 45
    empty                          shift and go to state 46
    assign                         shift and go to state 47
    call                           shift and go to state 48
    return                         shift and go to state 49
    ifStatement                    shift and go to state 50
    whileStatement                 shift and go to state 51
    location                       shift and go to state 52

state 118

    (36) parameters -> OPARENTHESIS parameter . CPARENTHESIS

    CPARENTHESIS    shift and go to state 148


state 119

    (37) parameter -> variableType . IDENTIFIER parameterExtra

    IDENTIFIER      shift and go to state 149


state 120

    (38) parameter -> empty .

    CPARENTHESIS    reduce using rule 38 (parameter -> empty .)


state 121

    (8) declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON .

    NUMBER          reduce using rule 8 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON .)
    WORDS           reduce using rule 8 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON .)
    LETTER          reduce using rule 8 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON .)
    FLAG            reduce using rule 8 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON .)
    MANYNUMBERS     reduce using rule 8 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON .)
    ENDVARIABLES    reduce using rule 8 (declaration -> variableType IDENTIFIER ASSIGNATION expression declarationExtra SEMICOLON .)


state 122

    (75) binaryExpression -> expression OR expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 75 (binaryExpression -> expression OR expression .)
    COMMA           reduce using rule 75 (binaryExpression -> expression OR expression .)
    SEMICOLON       reduce using rule 75 (binaryExpression -> expression OR expression .)
    CPARENTHESIS    reduce using rule 75 (binaryExpression -> expression OR expression .)
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101

  ! AND             [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! LESSER          [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! EQUALITY        [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! MULTIPLICATION  [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! DIVISION        [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 75 (binaryExpression -> expression OR expression .) ]
  ! OR              [ shift and go to state 92 ]


state 123

    (76) binaryExpression -> expression AND expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 76 (binaryExpression -> expression AND expression .)
    AND             reduce using rule 76 (binaryExpression -> expression AND expression .)
    COMMA           reduce using rule 76 (binaryExpression -> expression AND expression .)
    SEMICOLON       reduce using rule 76 (binaryExpression -> expression AND expression .)
    CPARENTHESIS    reduce using rule 76 (binaryExpression -> expression AND expression .)
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101

  ! LESSER          [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! EQUALITY        [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! MULTIPLICATION  [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! DIVISION        [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 76 (binaryExpression -> expression AND expression .) ]
  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]


state 124

    (77) binaryExpression -> expression LESSER expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    AND             reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    LESSER          reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    GREATER         reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    EQUALITY        reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    COMMA           reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    SEMICOLON       reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    CPARENTHESIS    reduce using rule 77 (binaryExpression -> expression LESSER expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101

  ! PLUS            [ reduce using rule 77 (binaryExpression -> expression LESSER expression .) ]
  ! MINUS           [ reduce using rule 77 (binaryExpression -> expression LESSER expression .) ]
  ! MULTIPLICATION  [ reduce using rule 77 (binaryExpression -> expression LESSER expression .) ]
  ! DIVISION        [ reduce using rule 77 (binaryExpression -> expression LESSER expression .) ]
  ! MODULUS         [ reduce using rule 77 (binaryExpression -> expression LESSER expression .) ]
  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]


state 125

    (78) binaryExpression -> expression GREATER expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    AND             reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    LESSER          reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    GREATER         reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    EQUALITY        reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    COMMA           reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    CPARENTHESIS    reduce using rule 78 (binaryExpression -> expression GREATER expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101

  ! PLUS            [ reduce using rule 78 (binaryExpression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 78 (binaryExpression -> expression GREATER expression .) ]
  ! MULTIPLICATION  [ reduce using rule 78 (binaryExpression -> expression GREATER expression .) ]
  ! DIVISION        [ reduce using rule 78 (binaryExpression -> expression GREATER expression .) ]
  ! MODULUS         [ reduce using rule 78 (binaryExpression -> expression GREATER expression .) ]
  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]


state 126

    (79) binaryExpression -> expression EQUALITY expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 79 (binaryExpression -> expression EQUALITY expression .)
    AND             reduce using rule 79 (binaryExpression -> expression EQUALITY expression .)
    EQUALITY        reduce using rule 79 (binaryExpression -> expression EQUALITY expression .)
    COMMA           reduce using rule 79 (binaryExpression -> expression EQUALITY expression .)
    SEMICOLON       reduce using rule 79 (binaryExpression -> expression EQUALITY expression .)
    CPARENTHESIS    reduce using rule 79 (binaryExpression -> expression EQUALITY expression .)
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101

  ! LESSER          [ reduce using rule 79 (binaryExpression -> expression EQUALITY expression .) ]
  ! GREATER         [ reduce using rule 79 (binaryExpression -> expression EQUALITY expression .) ]
  ! PLUS            [ reduce using rule 79 (binaryExpression -> expression EQUALITY expression .) ]
  ! MINUS           [ reduce using rule 79 (binaryExpression -> expression EQUALITY expression .) ]
  ! MULTIPLICATION  [ reduce using rule 79 (binaryExpression -> expression EQUALITY expression .) ]
  ! DIVISION        [ reduce using rule 79 (binaryExpression -> expression EQUALITY expression .) ]
  ! MODULUS         [ reduce using rule 79 (binaryExpression -> expression EQUALITY expression .) ]
  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! EQUALITY        [ shift and go to state 96 ]


state 127

    (80) binaryExpression -> expression PLUS expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    AND             reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    LESSER          reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    GREATER         reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    EQUALITY        reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    PLUS            reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    MINUS           reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    COMMA           reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    CPARENTHESIS    reduce using rule 80 (binaryExpression -> expression PLUS expression .)
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101

  ! MULTIPLICATION  [ reduce using rule 80 (binaryExpression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 80 (binaryExpression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 80 (binaryExpression -> expression PLUS expression .) ]
  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]


state 128

    (81) binaryExpression -> expression MINUS expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    AND             reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    LESSER          reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    GREATER         reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    EQUALITY        reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    PLUS            reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    MINUS           reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    COMMA           reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    CPARENTHESIS    reduce using rule 81 (binaryExpression -> expression MINUS expression .)
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101

  ! MULTIPLICATION  [ reduce using rule 81 (binaryExpression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 81 (binaryExpression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 81 (binaryExpression -> expression MINUS expression .) ]
  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]


state 129

    (82) binaryExpression -> expression MULTIPLICATION expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    AND             reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    LESSER          reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    GREATER         reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    EQUALITY        reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    PLUS            reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    MINUS           reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    MULTIPLICATION  reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    DIVISION        reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    MODULUS         reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    COMMA           reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    SEMICOLON       reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)
    CPARENTHESIS    reduce using rule 82 (binaryExpression -> expression MULTIPLICATION expression .)

  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLICATION  [ shift and go to state 99 ]
  ! DIVISION        [ shift and go to state 100 ]
  ! MODULUS         [ shift and go to state 101 ]


state 130

    (83) binaryExpression -> expression DIVISION expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    AND             reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    LESSER          reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    GREATER         reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    EQUALITY        reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    PLUS            reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    MINUS           reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    MULTIPLICATION  reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    DIVISION        reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    MODULUS         reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    COMMA           reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    SEMICOLON       reduce using rule 83 (binaryExpression -> expression DIVISION expression .)
    CPARENTHESIS    reduce using rule 83 (binaryExpression -> expression DIVISION expression .)

  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLICATION  [ shift and go to state 99 ]
  ! DIVISION        [ shift and go to state 100 ]
  ! MODULUS         [ shift and go to state 101 ]


state 131

    (84) binaryExpression -> expression MODULUS expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    OR              reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    AND             reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    LESSER          reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    GREATER         reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    EQUALITY        reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    PLUS            reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    MINUS           reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    MULTIPLICATION  reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    DIVISION        reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    MODULUS         reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    COMMA           reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 84 (binaryExpression -> expression MODULUS expression .)
    CPARENTHESIS    reduce using rule 84 (binaryExpression -> expression MODULUS expression .)

  ! OR              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! LESSER          [ shift and go to state 94 ]
  ! GREATER         [ shift and go to state 95 ]
  ! EQUALITY        [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLICATION  [ shift and go to state 99 ]
  ! DIVISION        [ shift and go to state 100 ]
  ! MODULUS         [ shift and go to state 101 ]


state 132

    (74) expression -> OPARENTHESIS expression CPARENTHESIS .

    OR              reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    AND             reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    LESSER          reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    GREATER         reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    EQUALITY        reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    PLUS            reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    MINUS           reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    MULTIPLICATION  reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    DIVISION        reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    MODULUS         reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    COMMA           reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    SEMICOLON       reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 74 (expression -> OPARENTHESIS expression CPARENTHESIS .)


state 133

    (13) declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression . declarationExtra
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression
    (13) declarationExtra -> . COMMA IDENTIFIER ASSIGNATION expression declarationExtra
    (15) declarationExtra -> . COMMA IDENTIFIER declarationExtra
    (17) declarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101
    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    declarationExtra               shift and go to state 150
    empty                          shift and go to state 41

state 134

    (9) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION . expression arrayDeclarationExtra SEMICOLON
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 151
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 135

    (11) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra . SEMICOLON

    SEMICOLON       shift and go to state 152


state 136

    (14) arrayDeclarationExtra -> COMMA . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> COMMA . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra

    IDENTIFIER      shift and go to state 153


state 137

    (18) arrayDeclarationExtra -> empty .

    SEMICOLON       reduce using rule 18 (arrayDeclarationExtra -> empty .)


state 138

    (20) arrayIndexesExtra -> COMMA NUMBERVALUE . arrayIndexesExtra
    (20) arrayIndexesExtra -> . COMMA NUMBERVALUE arrayIndexesExtra
    (21) arrayIndexesExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 108
    CBRACKETS       reduce using rule 2 (empty -> .)

    arrayIndexesExtra              shift and go to state 154
    empty                          shift and go to state 109

state 139

    (54) call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .

    SEMICOLON       reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    ASSIGNATION     reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    OR              reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    AND             reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    LESSER          reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    GREATER         reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    EQUALITY        reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    PLUS            reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    MINUS           reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    MULTIPLICATION  reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    DIVISION        reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    MODULUS         reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    COMMA           reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 54 (call -> IDENTIFIER OPARENTHESIS actuals CPARENTHESIS .)


state 140

    (55) actuals -> expression commaExpressionList .

    CPARENTHESIS    reduce using rule 55 (actuals -> expression commaExpressionList .)


state 141

    (56) commaExpressionList -> commaExpression . commaExpressionList
    (56) commaExpressionList -> . commaExpression commaExpressionList
    (57) commaExpressionList -> . empty
    (58) commaExpression -> . COMMA expression
    (2) empty -> .

    COMMA           shift and go to state 143
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    commaExpression                shift and go to state 141
    commaExpressionList            shift and go to state 155
    empty                          shift and go to state 142

state 142

    (57) commaExpressionList -> empty .

    CPARENTHESIS    reduce using rule 57 (commaExpressionList -> empty .)


state 143

    (58) commaExpression -> COMMA . expression
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 156
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 144

    (52) location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .

    ASSIGNATION     reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    OR              reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    AND             reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    LESSER          reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    GREATER         reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    EQUALITY        reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    PLUS            reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    MINUS           reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    MULTIPLICATION  reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    DIVISION        reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    MODULUS         reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    COMMA           reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    SEMICOLON       reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)
    CPARENTHESIS    reduce using rule 52 (location -> IDENTIFIER OBRACKETS arrayIndexes CBRACKETS .)


state 145

    (62) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS . statementPoint elseStatement ENDIF
    (41) statementPoint -> . statementList
    (42) statementList -> . statement statementList
    (43) statementList -> . empty
    (44) statement -> . assign SEMICOLON
    (45) statement -> . call SEMICOLON
    (46) statement -> . return empty
    (47) statement -> . ifStatement empty
    (48) statement -> . whileStatement empty
    (49) statement -> . empty
    (2) empty -> .
    (50) assign -> . location ASSIGNATION expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (59) return -> . RETURN returnExpression SEMICOLON
    (62) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF
    (65) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ELSE            reduce using rule 2 (empty -> .)
    ENDIF           reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    statementPoint                 shift and go to state 157
    statementList                  shift and go to state 44
    statement                      shift and go to state 45
    empty                          shift and go to state 46
    assign                         shift and go to state 47
    call                           shift and go to state 48
    return                         shift and go to state 49
    ifStatement                    shift and go to state 50
    whileStatement                 shift and go to state 51
    location                       shift and go to state 52

state 146

    (65) whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS . statementPoint ENDWHILE
    (41) statementPoint -> . statementList
    (42) statementList -> . statement statementList
    (43) statementList -> . empty
    (44) statement -> . assign SEMICOLON
    (45) statement -> . call SEMICOLON
    (46) statement -> . return empty
    (47) statement -> . ifStatement empty
    (48) statement -> . whileStatement empty
    (49) statement -> . empty
    (2) empty -> .
    (50) assign -> . location ASSIGNATION expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (59) return -> . RETURN returnExpression SEMICOLON
    (62) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF
    (65) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ENDWHILE        reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    statementPoint                 shift and go to state 158
    statementList                  shift and go to state 44
    statement                      shift and go to state 45
    empty                          shift and go to state 46
    assign                         shift and go to state 47
    call                           shift and go to state 48
    return                         shift and go to state 49
    ifStatement                    shift and go to state 50
    whileStatement                 shift and go to state 51
    location                       shift and go to state 52

state 147

    (26) block -> DEFINE blockType IDENTIFIER parameters variables statementPoint . ENDDEFINE

    ENDDEFINE       shift and go to state 159


state 148

    (36) parameters -> OPARENTHESIS parameter CPARENTHESIS .

    VARIABLES       reduce using rule 36 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    IDENTIFIER      reduce using rule 36 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    RETURN          reduce using rule 36 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    IF              reduce using rule 36 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    WHILE           reduce using rule 36 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)
    ENDDEFINE       reduce using rule 36 (parameters -> OPARENTHESIS parameter CPARENTHESIS .)


state 149

    (37) parameter -> variableType IDENTIFIER . parameterExtra
    (39) parameterExtra -> . COMMA variableType IDENTIFIER parameterExtra
    (40) parameterExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 161
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    parameterExtra                 shift and go to state 160
    empty                          shift and go to state 162

state 150

    (13) declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra .

    SEMICOLON       reduce using rule 13 (declarationExtra -> COMMA IDENTIFIER ASSIGNATION expression declarationExtra .)


state 151

    (9) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression . arrayDeclarationExtra SEMICOLON
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression
    (14) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra
    (18) arrayDeclarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101
    COMMA           shift and go to state 136
    SEMICOLON       reduce using rule 2 (empty -> .)

    arrayDeclarationExtra          shift and go to state 163
    empty                          shift and go to state 137

state 152

    (11) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON .

    NUMBER          reduce using rule 11 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON .)
    WORDS           reduce using rule 11 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON .)
    LETTER          reduce using rule 11 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON .)
    FLAG            reduce using rule 11 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON .)
    MANYNUMBERS     reduce using rule 11 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON .)
    ENDVARIABLES    reduce using rule 11 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra SEMICOLON .)


state 153

    (14) arrayDeclarationExtra -> COMMA IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> COMMA IDENTIFIER . OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra

    OBRACKETS       shift and go to state 164


state 154

    (20) arrayIndexesExtra -> COMMA NUMBERVALUE arrayIndexesExtra .

    CBRACKETS       reduce using rule 20 (arrayIndexesExtra -> COMMA NUMBERVALUE arrayIndexesExtra .)


state 155

    (56) commaExpressionList -> commaExpression commaExpressionList .

    CPARENTHESIS    reduce using rule 56 (commaExpressionList -> commaExpression commaExpressionList .)


state 156

    (58) commaExpression -> COMMA expression .
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression

    COMMA           reduce using rule 58 (commaExpression -> COMMA expression .)
    CPARENTHESIS    reduce using rule 58 (commaExpression -> COMMA expression .)
    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101


state 157

    (62) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint . elseStatement ENDIF
    (63) elseStatement -> . ELSE statementPoint
    (64) elseStatement -> . empty
    (2) empty -> .

    ELSE            shift and go to state 166
    ENDIF           reduce using rule 2 (empty -> .)

    elseStatement                  shift and go to state 165
    empty                          shift and go to state 167

state 158

    (65) whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint . ENDWHILE

    ENDWHILE        shift and go to state 168


state 159

    (26) block -> DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINE .

    DEFINE          reduce using rule 26 (block -> DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINE .)
    ENDBLOCKS       reduce using rule 26 (block -> DEFINE blockType IDENTIFIER parameters variables statementPoint ENDDEFINE .)


state 160

    (37) parameter -> variableType IDENTIFIER parameterExtra .

    CPARENTHESIS    reduce using rule 37 (parameter -> variableType IDENTIFIER parameterExtra .)


state 161

    (39) parameterExtra -> COMMA . variableType IDENTIFIER parameterExtra
    (31) variableType -> . NUMBER
    (32) variableType -> . WORDS
    (33) variableType -> . LETTER
    (34) variableType -> . FLAG

    NUMBER          shift and go to state 16
    WORDS           shift and go to state 17
    LETTER          shift and go to state 18
    FLAG            shift and go to state 19

    variableType                   shift and go to state 169

state 162

    (40) parameterExtra -> empty .

    CPARENTHESIS    reduce using rule 40 (parameterExtra -> empty .)


state 163

    (9) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra . SEMICOLON

    SEMICOLON       shift and go to state 170


state 164

    (14) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS . arrayIndexes CBRACKETS arrayDeclarationExtra
    (19) arrayIndexes -> . NUMBERVALUE arrayIndexesExtra

    NUMBERVALUE     shift and go to state 73

    arrayIndexes                   shift and go to state 171

state 165

    (62) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement . ENDIF

    ENDIF           shift and go to state 172


state 166

    (63) elseStatement -> ELSE . statementPoint
    (41) statementPoint -> . statementList
    (42) statementList -> . statement statementList
    (43) statementList -> . empty
    (44) statement -> . assign SEMICOLON
    (45) statement -> . call SEMICOLON
    (46) statement -> . return empty
    (47) statement -> . ifStatement empty
    (48) statement -> . whileStatement empty
    (49) statement -> . empty
    (2) empty -> .
    (50) assign -> . location ASSIGNATION expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS
    (59) return -> . RETURN returnExpression SEMICOLON
    (62) ifStatement -> . IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF
    (65) whileStatement -> . WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ENDIF           reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    statementPoint                 shift and go to state 173
    statementList                  shift and go to state 44
    statement                      shift and go to state 45
    empty                          shift and go to state 46
    assign                         shift and go to state 47
    call                           shift and go to state 48
    return                         shift and go to state 49
    ifStatement                    shift and go to state 50
    whileStatement                 shift and go to state 51
    location                       shift and go to state 52

state 167

    (64) elseStatement -> empty .

    ENDIF           reduce using rule 64 (elseStatement -> empty .)


state 168

    (65) whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .

    IDENTIFIER      reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    RETURN          reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    IF              reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    WHILE           reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    FINISH          reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    ENDDEFINE       reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    ELSE            reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    ENDIF           reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)
    ENDWHILE        reduce using rule 65 (whileStatement -> WHILE OPARENTHESIS expression CPARENTHESIS statementPoint ENDWHILE .)


state 169

    (39) parameterExtra -> COMMA variableType . IDENTIFIER parameterExtra

    IDENTIFIER      shift and go to state 174


state 170

    (9) declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON .

    NUMBER          reduce using rule 9 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON .)
    WORDS           reduce using rule 9 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON .)
    LETTER          reduce using rule 9 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON .)
    FLAG            reduce using rule 9 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON .)
    MANYNUMBERS     reduce using rule 9 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON .)
    ENDVARIABLES    reduce using rule 9 (declaration -> arrayType IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra SEMICOLON .)


state 171

    (14) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes . CBRACKETS arrayDeclarationExtra

    CBRACKETS       shift and go to state 175


state 172

    (62) ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .

    IDENTIFIER      reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    RETURN          reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    IF              reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    WHILE           reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    FINISH          reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    ENDDEFINE       reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    ELSE            reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    ENDIF           reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)
    ENDWHILE        reduce using rule 62 (ifStatement -> IF OPARENTHESIS expression CPARENTHESIS statementPoint elseStatement ENDIF .)


state 173

    (63) elseStatement -> ELSE statementPoint .

    ENDIF           reduce using rule 63 (elseStatement -> ELSE statementPoint .)


state 174

    (39) parameterExtra -> COMMA variableType IDENTIFIER . parameterExtra
    (39) parameterExtra -> . COMMA variableType IDENTIFIER parameterExtra
    (40) parameterExtra -> . empty
    (2) empty -> .

    COMMA           shift and go to state 161
    CPARENTHESIS    reduce using rule 2 (empty -> .)

    parameterExtra                 shift and go to state 176
    empty                          shift and go to state 162

state 175

    (14) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS . ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS . arrayDeclarationExtra
    (14) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra
    (18) arrayDeclarationExtra -> . empty
    (2) empty -> .

    ASSIGNATION     shift and go to state 177
    COMMA           shift and go to state 136
    SEMICOLON       reduce using rule 2 (empty -> .)

    arrayDeclarationExtra          shift and go to state 178
    empty                          shift and go to state 137

state 176

    (39) parameterExtra -> COMMA variableType IDENTIFIER parameterExtra .

    CPARENTHESIS    reduce using rule 39 (parameterExtra -> COMMA variableType IDENTIFIER parameterExtra .)


state 177

    (14) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION . expression arrayDeclarationExtra
    (67) expression -> . location
    (68) expression -> . unaryExpression
    (69) expression -> . binaryExpression
    (70) expression -> . FLAGVALUE
    (71) expression -> . NUMBERVALUE
    (72) expression -> . WORDSVALUE
    (73) expression -> . LETTERVALUE
    (74) expression -> . OPARENTHESIS expression CPARENTHESIS
    (51) location -> . IDENTIFIER
    (52) location -> . IDENTIFIER OBRACKETS arrayIndexes CBRACKETS
    (53) location -> . call
    (85) unaryExpression -> . NOT expression
    (75) binaryExpression -> . expression OR expression
    (76) binaryExpression -> . expression AND expression
    (77) binaryExpression -> . expression LESSER expression
    (78) binaryExpression -> . expression GREATER expression
    (79) binaryExpression -> . expression EQUALITY expression
    (80) binaryExpression -> . expression PLUS expression
    (81) binaryExpression -> . expression MINUS expression
    (82) binaryExpression -> . expression MULTIPLICATION expression
    (83) binaryExpression -> . expression DIVISION expression
    (84) binaryExpression -> . expression MODULUS expression
    (54) call -> . IDENTIFIER OPARENTHESIS actuals CPARENTHESIS

    FLAGVALUE       shift and go to state 63
    NUMBERVALUE     shift and go to state 64
    WORDSVALUE      shift and go to state 65
    LETTERVALUE     shift and go to state 66
    OPARENTHESIS    shift and go to state 67
    IDENTIFIER      shift and go to state 58
    NOT             shift and go to state 69

    expression                     shift and go to state 179
    location                       shift and go to state 60
    unaryExpression                shift and go to state 61
    binaryExpression               shift and go to state 62
    call                           shift and go to state 68

state 178

    (16) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra .

    SEMICOLON       reduce using rule 16 (arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra .)


state 179

    (14) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression . arrayDeclarationExtra
    (75) binaryExpression -> expression . OR expression
    (76) binaryExpression -> expression . AND expression
    (77) binaryExpression -> expression . LESSER expression
    (78) binaryExpression -> expression . GREATER expression
    (79) binaryExpression -> expression . EQUALITY expression
    (80) binaryExpression -> expression . PLUS expression
    (81) binaryExpression -> expression . MINUS expression
    (82) binaryExpression -> expression . MULTIPLICATION expression
    (83) binaryExpression -> expression . DIVISION expression
    (84) binaryExpression -> expression . MODULUS expression
    (14) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra
    (16) arrayDeclarationExtra -> . COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS arrayDeclarationExtra
    (18) arrayDeclarationExtra -> . empty
    (2) empty -> .

    OR              shift and go to state 92
    AND             shift and go to state 93
    LESSER          shift and go to state 94
    GREATER         shift and go to state 95
    EQUALITY        shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLICATION  shift and go to state 99
    DIVISION        shift and go to state 100
    MODULUS         shift and go to state 101
    COMMA           shift and go to state 136
    SEMICOLON       reduce using rule 2 (empty -> .)

    arrayDeclarationExtra          shift and go to state 180
    empty                          shift and go to state 137

state 180

    (14) arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra .

    SEMICOLON       reduce using rule 14 (arrayDeclarationExtra -> COMMA IDENTIFIER OBRACKETS arrayIndexes CBRACKETS ASSIGNATION expression arrayDeclarationExtra .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 5 resolved as shift
WARNING: shift/reduce conflict for WORDS in state 5 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 5 resolved as shift
WARNING: shift/reduce conflict for FLAG in state 5 resolved as shift
WARNING: shift/reduce conflict for MANYNUMBERS in state 5 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 9 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 12 resolved as shift
WARNING: shift/reduce conflict for WORDS in state 12 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 12 resolved as shift
WARNING: shift/reduce conflict for FLAG in state 12 resolved as shift
WARNING: shift/reduce conflict for MANYNUMBERS in state 12 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 31 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 31 resolved as shift
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 117 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 117 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 145 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 146 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 146 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 146 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 166 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 166 resolved as shift
WARNING: shift/reduce conflict for IF in state 166 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 166 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (declarationList -> empty)
WARNING: rejected rule (declaration -> empty) in state 13
WARNING: reduce/reduce conflict in state 25 resolved using rule (blockList -> empty)
WARNING: rejected rule (block -> empty) in state 25
WARNING: reduce/reduce conflict in state 46 resolved using rule (statementList -> empty)
WARNING: rejected rule (statement -> empty) in state 46
